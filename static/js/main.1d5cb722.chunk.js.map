{"version":3,"sources":["app/resources.tsx","app/domain/Resource.ts","app/buildings.tsx","app/recipes.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["resourceTypeChoices","map","t","id","name","ResourceFilter","props","Filter","SearchInput","source","alwaysOn","ResourceList","List","filters","Datagrid","TextField","EditButton","ResourceTitle","record","ResourceEdit","Edit","title","transform","data","_","camelCase","SimpleForm","TextInput","validate","required","SelectInput","choices","defaultValue","ResourceCreate","Create","BuildingFilter","BuildingList","NumberField","BuildingTitle","BuildingEdit","NumberInput","ArrayInput","SimpleFormIterator","BuildingCreate","RecipeFilter","RecipeList","ArrayField","SingleFieldList","ReferenceField","label","reference","ChipField","RecipeTitle","Graph","nodes","edges","GraphField","dataProvider","useDataProvider","dryRecipe","useFormState","values","useState","graph","setGraph","loading","setLoading","error","setError","useEffect","Promise","all","getOne","building","getMany","ids","inputs","filter","negate","isNil","input","resource","outputs","output","then","dryBuilding","inputResources","outputResources","buildingNode","text","inputNodes","outputNodes","inputEdges","inputNode","from","to","outputEdges","outputNode","newGraph","catch","Loading","Error","style","position","height","width","left","right","top","bottom","fit","pannable","RecipeEdit","TabbedForm","FormTab","ReferenceInput","optionText","RecipeCreate","localStorageDataProvider","defaultData","localStorageKey","localStorageUpdateDelay","loggingEnabled","App","Admin","list","create","edit","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sZAwBaA,ECxBgB,CAAC,QAAS,UDwBUC,KAAI,SAACC,GAAD,MAAQ,CAC3DC,GAAID,EACJE,KAAMF,MAGFG,EAA0D,SAACC,GAAD,OAC9D,cAACC,EAAA,EAAD,2BAAYD,GAAZ,aACE,cAACE,EAAA,EAAD,CAAaC,OAAO,IAAIC,UAAQ,QAIvBC,EAAoC,SAACL,GAAD,OAC/C,cAACM,EAAA,EAAD,2BAAUN,GAAV,IAAiBO,QAAS,cAAC,EAAD,IAA1B,SACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAWN,OAAO,OAClB,cAACM,EAAA,EAAD,CAAWN,OAAO,SAClB,cAACM,EAAA,EAAD,CAAWN,OAAO,SAClB,cAAC,aAAD,CAAYA,OAAO,UACnB,cAACO,EAAA,EAAD,WASAC,EAA8C,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OAClDA,EACE,8CACaA,EAAOf,GADpB,MAC2Be,EAAOd,QAEhC,MAEOe,EAAoC,SAACb,GAAD,OAC/C,cAACc,EAAA,EAAD,yBACEC,MAAO,cAAC,EAAD,KACHf,GAFN,IAGEgB,UAAW,SAACC,GAAD,OACTA,EAAKpB,GAAKoB,EAAV,2BAAsBA,GAAtB,IAA4BpB,GAAIqB,IAAEC,UAAUF,EAAKnB,SAJrD,SAOE,eAACsB,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAWlB,OAAO,OAClB,cAACkB,EAAA,EAAD,CAAWlB,OAAO,OAAOmB,SAAUC,gBACnC,cAACC,EAAA,EAAD,CACEC,QAAS/B,EACTS,OAAO,OACPmB,SAAUC,cACVG,aAAc,UAEhB,cAAC,aAAD,CAAYvB,OAAO,QAAQuB,aAAc,mBAKlCC,EAAwC,SAAC3B,GAAD,OACnD,cAAC4B,EAAA,EAAD,yBACEb,MAAM,qBACFf,GAFN,IAGEgB,UAAW,SAACC,GAAD,OACTA,EAAKpB,GAAKoB,EAAV,2BAAsBA,GAAtB,IAA4BpB,GAAIqB,IAAEC,UAAUF,EAAKnB,SAJrD,SAOE,eAACsB,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAWlB,OAAO,OAClB,cAACkB,EAAA,EAAD,CAAWlB,OAAO,OAAOmB,SAAUC,gBACnC,cAACC,EAAA,EAAD,CACEC,QAAS/B,EACTS,OAAO,OACPuB,aAAc,UAEhB,cAAC,aAAD,CAAYvB,OAAO,QAAQuB,aAAc,mB,oCEnEzCG,EAA0D,SAAC7B,GAAD,OAC9D,cAACC,EAAA,EAAD,2BAAYD,GAAZ,aACE,cAACE,EAAA,EAAD,CAAaC,OAAO,IAAIC,UAAQ,QAIvB0B,EAAoC,SAAC9B,GAAD,OAC/C,cAACM,EAAA,EAAD,2BAAUN,GAAV,IAAiBO,QAAS,cAAC,EAAD,IAA1B,SACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAWN,OAAO,OAClB,cAACM,EAAA,EAAD,CAAWN,OAAO,SAClB,cAAC4B,EAAA,EAAD,CAAa5B,OAAO,qBACpB,cAACO,EAAA,EAAD,WAYAsB,EAAiD,SAAC,GAAD,IAAGpB,EAAH,EAAGA,OAAH,OACrDA,EACE,8CACaA,EAAOf,GADpB,MAC2Be,EAAOd,QAEhC,MAEOmC,EAAoC,SAACjC,GAAD,OAC/C,cAACc,EAAA,EAAD,yBACEC,MAAO,cAAC,EAAD,KACHf,GAFN,IAGEgB,UAAW,SAACC,GAAD,OACTA,EAAKpB,GAAKoB,EAAV,2BAAsBA,GAAtB,IAA4BpB,GAAIqB,IAAEC,UAAUF,EAAKnB,SAJrD,SAOE,eAACsB,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAWlB,OAAO,OAClB,cAACkB,EAAA,EAAD,CAAWlB,OAAO,OAAOmB,SAAUC,gBACnC,cAACW,EAAA,EAAD,CAAa/B,OAAO,mBAAmBmB,SAAUC,gBACjD,cAACY,EAAA,EAAD,CAAYhC,OAAO,SAASuB,aAAc,GAA1C,SACE,cAACU,EAAA,EAAD,UACE,cAACZ,EAAA,EAAD,CAAaC,QAAS/B,QAG1B,cAACyC,EAAA,EAAD,CAAYhC,OAAO,UAAUuB,aAAc,GAA3C,SACE,cAACU,EAAA,EAAD,UACE,cAACZ,EAAA,EAAD,CAAaC,QAAS/B,eAOnB2C,EAAwC,SAACrC,GAAD,OACnD,cAAC4B,EAAA,EAAD,yBACEb,MAAM,qBACFf,GAFN,IAGEgB,UAAW,SAACC,GAAD,OACTA,EAAKpB,GAAKoB,EAAV,2BAAsBA,GAAtB,IAA4BpB,GAAIqB,IAAEC,UAAUF,EAAKnB,SAJrD,SAOE,eAACsB,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAWlB,OAAO,OAClB,cAACkB,EAAA,EAAD,CAAWlB,OAAO,OAAOmB,SAAUC,gBACnC,cAACW,EAAA,EAAD,CAAa/B,OAAO,mBAAmBmB,SAAUC,gBACjD,cAACY,EAAA,EAAD,CAAYhC,OAAO,SAASuB,aAAc,GAA1C,SACE,cAACU,EAAA,EAAD,UACE,cAACZ,EAAA,EAAD,CAAaC,QAAS/B,QAG1B,cAACyC,EAAA,EAAD,CAAYhC,OAAO,UAAUuB,aAAc,GAA3C,SACE,cAACU,EAAA,EAAD,UACE,cAACZ,EAAA,EAAD,CAAaC,QAAS/B,e,+HC5D1B4C,GAAwD,SAACtC,GAAD,OAC5D,cAACC,EAAA,EAAD,2BAAYD,GAAZ,aACE,cAACE,EAAA,EAAD,CAAaC,OAAO,IAAIC,UAAQ,QAIvBmC,GAAkC,SAACvC,GAAD,OAC7C,cAACM,EAAA,EAAD,2BAAUN,GAAV,IAAiBO,QAAS,cAAC,GAAD,IAA1B,SACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAWN,OAAO,OAClB,cAACM,EAAA,EAAD,CAAWN,OAAO,SAClB,cAACqC,EAAA,EAAD,CAAYrC,OAAO,SAAnB,SACE,cAACsC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAgBC,MAAM,QAAQxC,OAAO,WAAWyC,UAAU,YAA1D,SACE,cAACC,EAAA,EAAD,CAAW1C,OAAO,eAIxB,cAACqC,EAAA,EAAD,CAAYrC,OAAO,UAAnB,SACE,cAACsC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CACEC,MAAM,SACNxC,OAAO,WACPyC,UAAU,YAHZ,SAKE,cAACC,EAAA,EAAD,CAAW1C,OAAO,eAIxB,cAACuC,EAAA,EAAD,CAAgBC,MAAM,WAAWxC,OAAO,WAAWyC,UAAU,YAA7D,SACE,cAACnC,EAAA,EAAD,CAAWN,OAAO,WAEpB,cAACO,EAAA,EAAD,WASAoC,GAA0C,SAAC,GAAD,IAAGlC,EAAH,EAAGA,OAAH,OAC9CA,EACE,4CACWA,EAAOf,GADlB,MACyBe,EAAOd,QAE9B,MAEAiD,GACJ,WAAqBC,EAA4BC,GAAoB,yBAAhDD,QAA+C,KAAnBC,SAG7CC,GAAmC,WACvC,IAAMC,EAAeC,cACfC,EAAYC,eAAeC,OAFY,EAGnBC,qBAHmB,mBAGtCC,EAHsC,KAG/BC,EAH+B,OAIfF,oBAAS,GAJM,mBAItCG,EAJsC,KAI7BC,EAJ6B,OAKnBJ,qBALmB,mBAKtCK,EALsC,KAK/BC,EAL+B,KAkE7C,OA5DAC,qBAAU,WACJV,GACFW,QAAQC,IAAI,CACVd,EAAae,OAAoB,YAAa,CAC5CrE,GAAIwD,EAAUc,WAEhBhB,EAAaiB,QAAqB,YAAa,CAC7CC,IAAKhB,EAAUiB,OACZC,OAAOrD,IAAEsD,OAAOtD,IAAEuD,QAClB9E,KAAI,SAAC+E,GAAD,OAAWA,EAAMC,cAE1BxB,EAAaiB,QAAqB,YAAa,CAC7CC,IAAKhB,EAAUuB,QACZL,OAAOrD,IAAEsD,OAAOtD,IAAEuD,QAClB9E,KAAI,SAACkF,GAAD,OAAYA,EAAOF,gBAG3BG,MACC,YAIO,IAAD,mBAHIC,EAGJ,KAHF9D,KACM+D,EAEJ,KAFF/D,KACMgE,EACJ,KADFhE,KAEIiE,EAAyB,CAC7BrF,GAAG,YAAD,OAAckF,EAAYlF,IAC5BsF,KAAMJ,EAAYjF,MAEdsF,EAAyBJ,EAAerF,KAAI,SAACgF,GAAD,MAAe,CAC/D9E,GAAG,SAAD,OAAW8E,EAAS9E,IACtBsF,KAAMR,EAAS7E,SAEXuF,EAA0BJ,EAAgBtF,KAAI,SAACgF,GAAD,MAAe,CACjE9E,GAAG,UAAD,OAAY8E,EAAS9E,IACvBsF,KAAMR,EAAS7E,SAEXwF,EAAyBF,EAAWzF,KAAI,SAAC4F,GAAD,MAAgB,CAC5D1F,GAAG,GAAD,OAAK0F,EAAU1F,GAAf,aAAsBqF,EAAarF,IACrC2F,KAAMD,EAAU1F,GAChB4F,GAAIP,EAAarF,OAEb6F,EAA0BL,EAAY1F,KAAI,SAACgG,GAAD,MAAiB,CAC/D9F,GAAG,GAAD,OAAKqF,EAAarF,GAAlB,aAAyB8F,EAAW9F,IACtC2F,KAAMN,EAAarF,GACnB4F,GAAIE,EAAW9F,OAEX+F,EAAW,IAAI7C,GAAJ,CACdmC,GADc,mBACGE,GADH,YACkBC,IADlB,sBAEXC,GAFW,YAEII,KAErBhC,EAASkC,GACThC,GAAW,MAGdiC,OAAM,SAAChC,GACNC,EAASD,GACTD,GAAW,QAGhB,CAACT,EAAcE,IAEdM,EAAgB,cAACmC,EAAA,EAAD,IAChBjC,EAAc,cAACkC,EAAA,EAAD,CAAOlC,MAAOA,IAC3BJ,EAEH,qBAAKuC,MAAO,CAAEC,SAAU,WAAYC,OAAQ,IAAKC,MAAO,QAAxD,SACE,qBACEH,MAAO,CACLC,SAAU,WACVG,KAAM,EACNC,MAAO,EACPC,IAAK,EACLC,OAAQ,GANZ,SASE,cAAC,UAAD,CACEC,KAAK,EACLC,UAAU,EACVzD,MAAOS,EAAMT,MACbC,MAAOQ,EAAMR,YAhBF,MAuBRyD,GAAkC,SAAC1G,GAC9C,OACE,cAACc,EAAA,EAAD,yBACEC,MAAO,cAAC,GAAD,KACHf,GAFN,IAGEgB,UAAW,SAACC,GAAD,OACTA,EAAKpB,GAAKoB,EAAV,2BAAsBA,GAAtB,IAA4BpB,GAAIqB,IAAEC,UAAUF,EAAKnB,SAJrD,SAOE,eAAC6G,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CAASjE,MAAM,aAAf,UACE,cAACtB,EAAA,EAAD,CAAWlB,OAAO,OAClB,cAACkB,EAAA,EAAD,CAAWlB,OAAO,OAAOmB,SAAUC,gBACnC,cAACY,EAAA,EAAD,CAAYhC,OAAO,SAASuB,aAAc,GAA1C,SACE,eAACU,EAAA,EAAD,WACE,cAACyE,GAAA,EAAD,CACElE,MAAM,WACNxC,OAAO,WACPyC,UAAU,YACVtB,SAAUC,cAJZ,SAME,cAACC,EAAA,EAAD,CAAasF,WAAW,WAE1B,cAAC5E,EAAA,EAAD,CAAa/B,OAAO,WAAWmB,SAAUC,qBAG7C,cAACY,EAAA,EAAD,CAAYhC,OAAO,UAAUuB,aAAc,GAA3C,SACE,eAACU,EAAA,EAAD,WACE,cAACyE,GAAA,EAAD,CACElE,MAAM,WACNxC,OAAO,WACPyC,UAAU,YACVtB,SAAUC,cAJZ,SAME,cAACC,EAAA,EAAD,CAAasF,WAAW,WAE1B,cAAC5E,EAAA,EAAD,CAAa/B,OAAO,WAAWmB,SAAUC,qBAG7C,cAACsF,GAAA,EAAD,CACElE,MAAM,WACNxC,OAAO,WACPyC,UAAU,YACVtB,SAAUC,cAJZ,SAME,cAACC,EAAA,EAAD,CAAasF,WAAW,cAG5B,cAACF,EAAA,EAAD,CAASjE,MAAM,SAAf,SACE,cAAC,GAAD,aAOGoE,GAAsC,SAAC/G,GAAD,OACjD,cAAC4B,EAAA,EAAD,yBACEb,MAAM,mBACFf,GAFN,IAGEgB,UAAW,SAACC,GAAD,OACTA,EAAKpB,GAAKoB,EAAV,2BAAsBA,GAAtB,IAA4BpB,GAAIqB,IAAEC,UAAUF,EAAKnB,SAJrD,SAOE,eAACsB,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAWlB,OAAO,OAClB,cAACkB,EAAA,EAAD,CAAWlB,OAAO,OAAOmB,SAAUC,gBACnC,cAACY,EAAA,EAAD,CAAYhC,OAAO,SAASuB,aAAc,GAA1C,SACE,eAACU,EAAA,EAAD,WACE,cAACyE,GAAA,EAAD,CACElE,MAAM,WACNxC,OAAO,WACPyC,UAAU,YACVtB,SAAUC,cAJZ,SAME,cAACC,EAAA,EAAD,CAAasF,WAAW,WAE1B,cAAC5E,EAAA,EAAD,CAAa/B,OAAO,WAAWmB,SAAUC,qBAG7C,cAACY,EAAA,EAAD,CAAYhC,OAAO,UAAUuB,aAAc,GAA3C,SACE,eAACU,EAAA,EAAD,WACE,cAACyE,GAAA,EAAD,CACElE,MAAM,WACNxC,OAAO,WACPyC,UAAU,YACVtB,SAAUC,cAJZ,SAME,cAACC,EAAA,EAAD,CAAasF,WAAW,WAE1B,cAAC5E,EAAA,EAAD,CAAa/B,OAAO,WAAWmB,SAAUC,qBAG7C,cAACsF,GAAA,EAAD,CACElE,MAAM,WACNxC,OAAO,WACPyC,UAAU,YACVtB,SAAUC,cAJZ,SAME,cAACC,EAAA,EAAD,CAAasF,WAAW,kBCxR1B3D,GAAe6D,YAAyB,CAC5CC,YAAa,GACbC,gBAAiB,gBACjBC,wBAAyB,EACzBC,gBAAgB,IA0BHC,GAvBH,kBACV,eAACC,EAAA,EAAD,CAAOnE,aAAcA,GAArB,UACE,cAAC,IAAD,CACErD,KAAK,YACLyH,KAAMlH,EACNmH,OAAQ7F,EACR8F,KAAM5G,IAER,cAAC,IAAD,CACEf,KAAK,YACLyH,KAAMzF,EACN0F,OAAQnF,EACRoF,KAAMxF,IAER,cAAC,IAAD,CACEnC,KAAK,UACLyH,KAAMhF,GACNiF,OAAQT,GACRU,KAAMf,SClBGgB,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqB9C,MAAK,YAAkD,IAA/C+C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1BZ,O","file":"static/js/main.1d5cb722.chunk.js","sourcesContent":["import * as React from \"react\";\nimport {\n  List,\n  Datagrid,\n  TextField,\n  Edit,\n  SimpleForm,\n  TextInput,\n  ListProps,\n  EditProps,\n  Create,\n  CreateProps,\n  EditButton,\n  SelectInput,\n  required,\n  FilterProps,\n  Filter,\n  SearchInput,\n} from \"react-admin\";\nimport { ColorField, ColorInput } from \"react-admin-color-input\";\nimport _ from \"lodash\";\nimport { DryResource } from \"./persistence/DryResource\";\nimport { ResourceType, resourceTypes } from \"./domain/Resource\";\n\nexport const resourceTypeChoices = resourceTypes.map((t) => ({\n  id: t,\n  name: t,\n}));\n\nconst ResourceFilter: React.FC<Omit<FilterProps, \"children\">> = (props) => (\n  <Filter {...props}>\n    <SearchInput source=\"q\" alwaysOn />\n  </Filter>\n);\n\nexport const ResourceList: React.FC<ListProps> = (props) => (\n  <List {...props} filters={<ResourceFilter />}>\n    <Datagrid>\n      <TextField source=\"id\" />\n      <TextField source=\"name\" />\n      <TextField source=\"type\" />\n      <ColorField source=\"color\" />\n      <EditButton />\n    </Datagrid>\n  </List>\n);\n\ninterface ResourceTitleProps {\n  record?: DryResource<ResourceType>;\n}\n\nconst ResourceTitle: React.FC<ResourceTitleProps> = ({ record }) =>\n  record ? (\n    <span>\n      Resource #{record.id} - {record.name}\n    </span>\n  ) : null;\n\nexport const ResourceEdit: React.FC<EditProps> = (props) => (\n  <Edit\n    title={<ResourceTitle />}\n    {...props}\n    transform={(data) =>\n      data.id ? data : { ...data, id: _.camelCase(data.name) }\n    }\n  >\n    <SimpleForm>\n      <TextInput source=\"id\" />\n      <TextInput source=\"name\" validate={required()} />\n      <SelectInput\n        choices={resourceTypeChoices}\n        source=\"type\"\n        validate={required()}\n        defaultValue={\"solid\"}\n      />\n      <ColorInput source=\"color\" defaultValue={\"#000000\"} />\n    </SimpleForm>\n  </Edit>\n);\n\nexport const ResourceCreate: React.FC<CreateProps> = (props) => (\n  <Create\n    title=\"Create a Resource\"\n    {...props}\n    transform={(data) =>\n      data.id ? data : { ...data, id: _.camelCase(data.name) }\n    }\n  >\n    <SimpleForm>\n      <TextInput source=\"id\" />\n      <TextInput source=\"name\" validate={required()} />\n      <SelectInput\n        choices={resourceTypeChoices}\n        source=\"type\"\n        defaultValue={\"solid\"}\n      />\n      <ColorInput source=\"color\" defaultValue={\"#000000\"} />\n    </SimpleForm>\n  </Create>\n);\n","export const resourceTypes = [\"solid\", \"liquid\"] as const;\nexport type ResourceType = typeof resourceTypes[number];\n\nexport class Resource<T extends ResourceType> {\n  constructor(\n    readonly id: string,\n    readonly name: string,\n    readonly color: string,\n    readonly type: T\n  ) {}\n}\n","import * as React from \"react\";\nimport {\n  List,\n  Datagrid,\n  TextField,\n  Edit,\n  SimpleForm,\n  TextInput,\n  ListProps,\n  EditProps,\n  Create,\n  CreateProps,\n  EditButton,\n  NumberField,\n  NumberInput,\n  ArrayInput,\n  SimpleFormIterator,\n  SelectInput,\n  required,\n  FilterProps,\n  Filter,\n  SearchInput,\n} from \"react-admin\";\nimport _ from \"lodash\";\nimport { DryBuilding } from \"./persistence/DryBuilding\";\nimport { ResourceType } from \"./domain/Resource\";\nimport { Tuple } from \"../utils/tuples\";\nimport { resourceTypeChoices } from \"./resources\";\n\nconst BuildingFilter: React.FC<Omit<FilterProps, \"children\">> = (props) => (\n  <Filter {...props}>\n    <SearchInput source=\"q\" alwaysOn />\n  </Filter>\n);\n\nexport const BuildingList: React.FC<ListProps> = (props) => (\n  <List {...props} filters={<BuildingFilter />}>\n    <Datagrid>\n      <TextField source=\"id\" />\n      <TextField source=\"name\" />\n      <NumberField source=\"powerConsumption\" />\n      <EditButton />\n    </Datagrid>\n  </List>\n);\n\ninterface DryBuildingTitleProps {\n  record?: DryBuilding<\n    Tuple<ResourceType, number>,\n    Tuple<ResourceType, number>\n  >;\n}\n\nconst BuildingTitle: React.FC<DryBuildingTitleProps> = ({ record }) =>\n  record ? (\n    <span>\n      Building #{record.id} - {record.name}\n    </span>\n  ) : null;\n\nexport const BuildingEdit: React.FC<EditProps> = (props) => (\n  <Edit\n    title={<BuildingTitle />}\n    {...props}\n    transform={(data) =>\n      data.id ? data : { ...data, id: _.camelCase(data.name) }\n    }\n  >\n    <SimpleForm>\n      <TextInput source=\"id\" />\n      <TextInput source=\"name\" validate={required()} />\n      <NumberInput source=\"powerConsumption\" validate={required()} />\n      <ArrayInput source=\"inputs\" defaultValue={[]}>\n        <SimpleFormIterator>\n          <SelectInput choices={resourceTypeChoices} />\n        </SimpleFormIterator>\n      </ArrayInput>\n      <ArrayInput source=\"outputs\" defaultValue={[]}>\n        <SimpleFormIterator>\n          <SelectInput choices={resourceTypeChoices} />\n        </SimpleFormIterator>\n      </ArrayInput>\n    </SimpleForm>\n  </Edit>\n);\n\nexport const BuildingCreate: React.FC<CreateProps> = (props) => (\n  <Create\n    title=\"Create a Building\"\n    {...props}\n    transform={(data) =>\n      data.id ? data : { ...data, id: _.camelCase(data.name) }\n    }\n  >\n    <SimpleForm>\n      <TextInput source=\"id\" />\n      <TextInput source=\"name\" validate={required()} />\n      <NumberInput source=\"powerConsumption\" validate={required()} />\n      <ArrayInput source=\"inputs\" defaultValue={[]}>\n        <SimpleFormIterator>\n          <SelectInput choices={resourceTypeChoices} />\n        </SimpleFormIterator>\n      </ArrayInput>\n      <ArrayInput source=\"outputs\" defaultValue={[]}>\n        <SimpleFormIterator>\n          <SelectInput choices={resourceTypeChoices} />\n        </SimpleFormIterator>\n      </ArrayInput>\n    </SimpleForm>\n  </Create>\n);\n","import { useState, useEffect } from \"react\";\nimport {\n  List,\n  Datagrid,\n  TextField,\n  ListProps,\n  Create,\n  SimpleForm,\n  TextInput,\n  NumberInput,\n  ArrayInput,\n  SimpleFormIterator,\n  SelectInput,\n  required,\n  CreateProps,\n  ReferenceInput,\n  ArrayField,\n  Edit,\n  EditProps,\n  ReferenceField,\n  SingleFieldList,\n  EditButton,\n  ChipField,\n  FilterProps,\n  TabbedForm,\n  FormTab,\n  useEditController,\n  useQueryWithStore,\n  Loading,\n  Error,\n  useDataProvider,\n  FieldProps,\n} from \"react-admin\";\nimport _ from \"lodash\";\nimport { Tuple } from \"../utils/tuples\";\nimport { ResourceType } from \"./domain/Resource\";\nimport { DryRecipe } from \"./persistence/DryRecipe\";\n\nimport { Filter, SearchInput } from \"react-admin\";\nimport { Canvas, EdgeData, NodeData } from \"reaflow\";\nimport { Recipe } from \"./domain/Recipe\";\nimport { DryBuilding } from \"./persistence/DryBuilding\";\nimport { DryResource } from \"./persistence/DryResource\";\nimport { useFormState } from \"react-final-form\";\n\nconst RecipeFilter: React.FC<Omit<FilterProps, \"children\">> = (props) => (\n  <Filter {...props}>\n    <SearchInput source=\"q\" alwaysOn />\n  </Filter>\n);\n\nexport const RecipeList: React.FC<ListProps> = (props) => (\n  <List {...props} filters={<RecipeFilter />}>\n    <Datagrid>\n      <TextField source=\"id\" />\n      <TextField source=\"name\" />\n      <ArrayField source=\"inputs\">\n        <SingleFieldList>\n          <ReferenceField label=\"Input\" source=\"resource\" reference=\"resources\">\n            <ChipField source=\"name\" />\n          </ReferenceField>\n        </SingleFieldList>\n      </ArrayField>\n      <ArrayField source=\"outputs\">\n        <SingleFieldList>\n          <ReferenceField\n            label=\"Output\"\n            source=\"resource\"\n            reference=\"resources\"\n          >\n            <ChipField source=\"name\" />\n          </ReferenceField>\n        </SingleFieldList>\n      </ArrayField>\n      <ReferenceField label=\"Building\" source=\"building\" reference=\"buildings\">\n        <TextField source=\"name\" />\n      </ReferenceField>\n      <EditButton />\n    </Datagrid>\n  </List>\n);\n\ninterface RecipeTitleProps {\n  record?: DryRecipe<Tuple<ResourceType, number>, Tuple<ResourceType, number>>;\n}\n\nconst RecipeTitle: React.FC<RecipeTitleProps> = ({ record }) =>\n  record ? (\n    <span>\n      Recipe #{record.id} - {record.name}\n    </span>\n  ) : null;\n\nclass Graph {\n  constructor(readonly nodes: NodeData[], readonly edges: EdgeData[]) {}\n}\n\nconst GraphField: React.FC<FieldProps> = () => {\n  const dataProvider = useDataProvider();\n  const dryRecipe = useFormState().values as DryRecipe | undefined;\n  const [graph, setGraph] = useState<Graph>();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string>();\n  useEffect(() => {\n    if (dryRecipe) {\n      Promise.all([\n        dataProvider.getOne<DryBuilding>(\"buildings\", {\n          id: dryRecipe.building,\n        }),\n        dataProvider.getMany<DryResource>(\"resources\", {\n          ids: dryRecipe.inputs\n            .filter(_.negate(_.isNil))\n            .map((input) => input.resource),\n        }),\n        dataProvider.getMany<DryResource>(\"resources\", {\n          ids: dryRecipe.outputs\n            .filter(_.negate(_.isNil))\n            .map((output) => output.resource),\n        }),\n      ])\n        .then(\n          ([\n            { data: dryBuilding },\n            { data: inputResources },\n            { data: outputResources },\n          ]) => {\n            const buildingNode: NodeData = {\n              id: `building_${dryBuilding.id}`,\n              text: dryBuilding.name,\n            };\n            const inputNodes: NodeData[] = inputResources.map((resource) => ({\n              id: `input_${resource.id}`,\n              text: resource.name,\n            }));\n            const outputNodes: NodeData[] = outputResources.map((resource) => ({\n              id: `output_${resource.id}`,\n              text: resource.name,\n            }));\n            const inputEdges: EdgeData[] = inputNodes.map((inputNode) => ({\n              id: `${inputNode.id}->${buildingNode.id}`,\n              from: inputNode.id,\n              to: buildingNode.id,\n            }));\n            const outputEdges: EdgeData[] = outputNodes.map((outputNode) => ({\n              id: `${buildingNode.id}->${outputNode.id}`,\n              from: buildingNode.id,\n              to: outputNode.id,\n            }));\n            const newGraph = new Graph(\n              [buildingNode, ...inputNodes, ...outputNodes],\n              [...inputEdges, ...outputEdges]\n            );\n            setGraph(newGraph);\n            setLoading(false);\n          }\n        )\n        .catch((error) => {\n          setError(error);\n          setLoading(false);\n        });\n    }\n  }, [dataProvider, dryRecipe]);\n\n  if (loading) return <Loading />;\n  if (error) return <Error error={error} />;\n  if (!graph) return null;\n  return (\n    <div style={{ position: \"relative\", height: 500, width: \"100%\" }}>\n      <div\n        style={{\n          position: \"absolute\",\n          left: 0,\n          right: 0,\n          top: 0,\n          bottom: 0,\n        }}\n      >\n        <Canvas\n          fit={true}\n          pannable={false}\n          nodes={graph.nodes}\n          edges={graph.edges}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport const RecipeEdit: React.FC<EditProps> = (props) => {\n  return (\n    <Edit\n      title={<RecipeTitle />}\n      {...props}\n      transform={(data) =>\n        data.id ? data : { ...data, id: _.camelCase(data.name) }\n      }\n    >\n      <TabbedForm>\n        <FormTab label=\"Properties\">\n          <TextInput source=\"id\" />\n          <TextInput source=\"name\" validate={required()} />\n          <ArrayInput source=\"inputs\" defaultValue={[]}>\n            <SimpleFormIterator>\n              <ReferenceInput\n                label=\"resource\"\n                source=\"resource\"\n                reference=\"resources\"\n                validate={required()}\n              >\n                <SelectInput optionText=\"name\" />\n              </ReferenceInput>\n              <NumberInput source=\"flowRate\" validate={required()} />\n            </SimpleFormIterator>\n          </ArrayInput>\n          <ArrayInput source=\"outputs\" defaultValue={[]}>\n            <SimpleFormIterator>\n              <ReferenceInput\n                label=\"resource\"\n                source=\"resource\"\n                reference=\"resources\"\n                validate={required()}\n              >\n                <SelectInput optionText=\"name\" />\n              </ReferenceInput>\n              <NumberInput source=\"flowRate\" validate={required()} />\n            </SimpleFormIterator>\n          </ArrayInput>\n          <ReferenceInput\n            label=\"building\"\n            source=\"building\"\n            reference=\"buildings\"\n            validate={required()}\n          >\n            <SelectInput optionText=\"name\" />\n          </ReferenceInput>\n        </FormTab>\n        <FormTab label=\"Design\">\n          <GraphField />\n        </FormTab>\n      </TabbedForm>\n    </Edit>\n  );\n};\n\nexport const RecipeCreate: React.FC<CreateProps> = (props) => (\n  <Create\n    title=\"Create a Recipe\"\n    {...props}\n    transform={(data) =>\n      data.id ? data : { ...data, id: _.camelCase(data.name) }\n    }\n  >\n    <SimpleForm>\n      <TextInput source=\"id\" />\n      <TextInput source=\"name\" validate={required()} />\n      <ArrayInput source=\"inputs\" defaultValue={[]}>\n        <SimpleFormIterator>\n          <ReferenceInput\n            label=\"resource\"\n            source=\"resource\"\n            reference=\"resources\"\n            validate={required()}\n          >\n            <SelectInput optionText=\"name\" />\n          </ReferenceInput>\n          <NumberInput source=\"flowRate\" validate={required()} />\n        </SimpleFormIterator>\n      </ArrayInput>\n      <ArrayInput source=\"outputs\" defaultValue={[]}>\n        <SimpleFormIterator>\n          <ReferenceInput\n            label=\"resource\"\n            source=\"resource\"\n            reference=\"resources\"\n            validate={required()}\n          >\n            <SelectInput optionText=\"name\" />\n          </ReferenceInput>\n          <NumberInput source=\"flowRate\" validate={required()} />\n        </SimpleFormIterator>\n      </ArrayInput>\n      <ReferenceInput\n        label=\"building\"\n        source=\"building\"\n        reference=\"buildings\"\n        validate={required()}\n      >\n        <SelectInput optionText=\"name\" />\n      </ReferenceInput>\n    </SimpleForm>\n  </Create>\n);\n","import * as React from \"react\";\nimport { Admin, Resource } from \"react-admin\";\nimport localStorageDataProvider from \"ra-data-local-storage\";\nimport { ResourceList, ResourceCreate, ResourceEdit } from \"./app/resources\";\nimport { BuildingList, BuildingCreate, BuildingEdit } from \"./app/buildings\";\nimport { RecipeCreate, RecipeEdit, RecipeList } from \"./app/recipes\";\n\nconst dataProvider = localStorageDataProvider({\n  defaultData: {},\n  localStorageKey: \"plantDesigner\",\n  localStorageUpdateDelay: 0,\n  loggingEnabled: true,\n});\n\nconst App = () => (\n  <Admin dataProvider={dataProvider}>\n    <Resource\n      name=\"resources\"\n      list={ResourceList}\n      create={ResourceCreate}\n      edit={ResourceEdit}\n    />\n    <Resource\n      name=\"buildings\"\n      list={BuildingList}\n      create={BuildingCreate}\n      edit={BuildingEdit}\n    />\n    <Resource\n      name=\"recipes\"\n      list={RecipeList}\n      create={RecipeCreate}\n      edit={RecipeEdit}\n    />\n  </Admin>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}