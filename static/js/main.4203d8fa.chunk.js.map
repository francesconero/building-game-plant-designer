{"version":3,"sources":["app/localStorageDataProviderExtended.ts","app/resources.tsx","app/domain/Resource.ts","app/buildings.tsx","app/view/recipe/RecipeGraph.tsx","app/view/graph/layout.ts","app/recipes.tsx","app/Dashboard.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SwappableDataProvider","targetDataProvider","getList","resource","params","getOne","getMany","getManyReference","update","updateMany","create","delete","deleteMany","localStorageDataProviderExtended","swappableDataProvider","localStorageDataProvider","import","db","localStorage","setItem","localStorageKey","JSON","stringify","console","info","Promise","resolve","data","export","getItem","parse","key","resourceTypeChoices","map","t","id","name","ResourceFilter","props","Filter","SearchInput","source","alwaysOn","ResourceList","List","filters","Datagrid","TextField","EditButton","ResourceTitle","record","ResourceEdit","Edit","title","transform","_","camelCase","SimpleForm","TextInput","validate","required","SelectInput","choices","defaultValue","ResourceCreate","Create","BuildingFilter","BuildingList","NumberField","BuildingTitle","BuildingEdit","NumberInput","ArrayInput","SimpleFormIterator","BuildingCreate","useStylesLoading","makeStyles","container","height","marginTop","flex","hydrateFlow","dryFlow","resources","hydratedResource","find","Error","flowToNode","type","flow","label","position","x","y","style","backgroundColor","color","borderColor","invert","Graph","nodes","edges","elements","direction","dagreGraph","dagre","graphlib","directed","setDefaultEdgeLabel","isHorizontal","setGraph","rankdir","forEach","el","isNode","setNode","width","setEdge","target","length","layout","nodeWithPosition","node","targetPosition","Position","Left","Top","sourcePosition","Right","Bottom","getLayoutedElements","this","RecipeGraphInner","dryRecipe","loadingClasses","dataProvider","useDataProvider","useState","graph","loading","setLoading","error","setError","fitView","useZoomPanHelper","useEffect","all","building","ids","inputs","filter","negate","isNil","input","outputs","output","then","dryBuilding","inputResources","outputResources","inputResourceFlows","outputResourceFlows","buildingNode","inputNodes","outputNodes","inputEdges","inputNode","flowRate","animated","arrowHeadType","ArrowHeadType","Arrow","outputEdges","outputNode","newGraph","catch","Loading","classes","maxZoom","onLoad","snapToGrid","nodesConnectable","nodesDraggable","elementsSelectable","showInteractive","variant","BackgroundVariant","Dots","gap","size","RecipeGraph","RecipeFilter","RecipeList","ArrayField","SingleFieldList","ReferenceField","reference","ChipField","RecipeTitle","GraphField","useFormState","values","useStylesEdit","root","display","main","flexDirection","card","useStylesForm","form","content","useStyles","formTabContainer","graphField","RecipeEdit","location","useLocation","customClasses","editClasses","tabbedFormClasses","activeTab","pathname","split","parseActiveTab","TabbedForm","className","undefined","FormTab","ReferenceInput","optionText","contentClassName","path","formClassName","RecipeCreate","Dashboard","notify","useNotify","Box","mt","Grid","justify","alignItems","spacing","item","Typography","component","Card","CardHeader","CardContent","accept","onChange","event","file","files","reader","FileReader","onload","readEvent","read","result","value","readAsText","htmlFor","Button","startIcon","onClick","response","blob","Blob","fakeLink","document","createElement","body","appendChild","window","navigator","msSaveOrOpenBlob","setAttribute","URL","createObjectURL","click","defaultData","localStorageUpdateDelay","loggingEnabled","App","Admin","dashboard","list","edit","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4203d8fa.chunk.js","sourcesContent":["import localStorageDataProvider, {\n  LocalStorageDataProviderParams,\n} from \"ra-data-local-storage\";\n\nimport {\n  CreateParams,\n  CreateResult,\n  DataProvider,\n  DeleteManyParams,\n  DeleteManyResult,\n  DeleteParams,\n  DeleteResult,\n  GetListParams,\n  GetListResult,\n  GetManyParams,\n  GetManyReferenceParams,\n  GetManyReferenceResult,\n  GetManyResult,\n  GetOneParams,\n  GetOneResult,\n  Record,\n  UpdateManyParams,\n  UpdateManyResult,\n  UpdateParams,\n  UpdateResult,\n} from \"react-admin\";\n\nclass SwappableDataProvider implements DataProvider {\n  constructor(public targetDataProvider: DataProvider) {}\n  getList: <RecordType extends Record = Record>(\n    resource: string,\n    params: GetListParams\n  ) => Promise<GetListResult<RecordType>> = (resource, params) => {\n    return this.targetDataProvider.getList(resource, params);\n  };\n  getOne: <RecordType extends Record = Record>(\n    resource: string,\n    params: GetOneParams\n  ) => Promise<GetOneResult<RecordType>> = (resource, params) => {\n    return this.targetDataProvider.getOne(resource, params);\n  };\n  getMany: <RecordType extends Record = Record>(\n    resource: string,\n    params: GetManyParams\n  ) => Promise<GetManyResult<RecordType>> = (resource, params) => {\n    return this.targetDataProvider.getMany(resource, params);\n  };\n  getManyReference: <RecordType extends Record = Record>(\n    resource: string,\n    params: GetManyReferenceParams\n  ) => Promise<GetManyReferenceResult<RecordType>> = (resource, params) => {\n    return this.targetDataProvider.getManyReference(resource, params);\n  };\n  update: <RecordType extends Record = Record>(\n    resource: string,\n    params: UpdateParams\n  ) => Promise<UpdateResult<RecordType>> = (resource, params) => {\n    return this.targetDataProvider.update(resource, params);\n  };\n  updateMany: (\n    resource: string,\n    params: UpdateManyParams\n  ) => Promise<UpdateManyResult> = (resource, params) => {\n    return this.targetDataProvider.updateMany(resource, params);\n  };\n  create: <RecordType extends Record = Record>(\n    resource: string,\n    params: CreateParams\n  ) => Promise<CreateResult<RecordType>> = (resource, params) => {\n    return this.targetDataProvider.create(resource, params);\n  };\n  delete: <RecordType extends Record = Record>(\n    resource: string,\n    params: DeleteParams\n  ) => Promise<DeleteResult<RecordType>> = (resource, params) => {\n    return this.targetDataProvider.delete(resource, params);\n  };\n  deleteMany: (\n    resource: string,\n    params: DeleteManyParams\n  ) => Promise<DeleteManyResult> = (resource, params) => {\n    return this.targetDataProvider.deleteMany(resource, params);\n  };\n  [key: string]: any;\n}\n\nconst localStorageDataProviderExtended = (\n  params: LocalStorageDataProviderParams\n): DataProvider => {\n  const swappableDataProvider = new SwappableDataProvider(\n    localStorageDataProvider(params)\n  );\n  return {\n    ...swappableDataProvider,\n    import: (db: any) => {\n      localStorage.setItem(params.localStorageKey, JSON.stringify(db));\n      swappableDataProvider.targetDataProvider = localStorageDataProvider(\n        params\n      );\n      console.info(\"Successfully imported DB\");\n      return Promise.resolve({ data: db });\n    },\n    export: () => {\n      const db = localStorage.getItem(params.localStorageKey);\n      if (db) {\n        return Promise.resolve({\n          data: {\n            db: JSON.parse(db),\n            key: params.localStorageKey,\n          },\n        });\n      } else {\n        return {};\n      }\n    },\n  };\n};\nexport default localStorageDataProviderExtended;\n","import * as React from \"react\";\nimport {\n  List,\n  Datagrid,\n  TextField,\n  Edit,\n  SimpleForm,\n  TextInput,\n  ListProps,\n  EditProps,\n  Create,\n  CreateProps,\n  EditButton,\n  SelectInput,\n  required,\n  FilterProps,\n  Filter,\n  SearchInput,\n} from \"react-admin\";\nimport { ColorField, ColorInput } from \"react-admin-color-input\";\nimport _ from \"lodash\";\nimport { DryResource } from \"./persistence/DryResource\";\nimport { ResourceType, resourceTypes } from \"./domain/Resource\";\n\nexport const resourceTypeChoices = resourceTypes.map((t) => ({\n  id: t,\n  name: t,\n}));\n\nconst ResourceFilter: React.FC<Omit<FilterProps, \"children\">> = (props) => (\n  <Filter {...props}>\n    <SearchInput source=\"q\" alwaysOn />\n  </Filter>\n);\n\nexport const ResourceList: React.FC<ListProps> = (props) => (\n  <List {...props} filters={<ResourceFilter />}>\n    <Datagrid>\n      <TextField source=\"id\" />\n      <TextField source=\"name\" />\n      <TextField source=\"type\" />\n      <ColorField source=\"color\" />\n      <EditButton />\n    </Datagrid>\n  </List>\n);\n\ninterface ResourceTitleProps {\n  record?: DryResource<ResourceType>;\n}\n\nconst ResourceTitle: React.FC<ResourceTitleProps> = ({ record }) =>\n  record ? (\n    <span>\n      Resource #{record.id} - {record.name}\n    </span>\n  ) : null;\n\nexport const ResourceEdit: React.FC<EditProps> = (props) => (\n  <Edit\n    title={<ResourceTitle />}\n    {...props}\n    transform={(data) =>\n      data.id ? data : { ...data, id: _.camelCase(data.name) }\n    }\n  >\n    <SimpleForm>\n      <TextInput source=\"id\" />\n      <TextInput source=\"name\" validate={required()} />\n      <SelectInput\n        choices={resourceTypeChoices}\n        source=\"type\"\n        validate={required()}\n        defaultValue={\"solid\"}\n      />\n      <ColorInput source=\"color\" defaultValue={\"#000000\"} />\n    </SimpleForm>\n  </Edit>\n);\n\nexport const ResourceCreate: React.FC<CreateProps> = (props) => (\n  <Create\n    title=\"Create a Resource\"\n    {...props}\n    transform={(data) =>\n      data.id ? data : { ...data, id: _.camelCase(data.name) }\n    }\n  >\n    <SimpleForm>\n      <TextInput source=\"id\" />\n      <TextInput source=\"name\" validate={required()} />\n      <SelectInput\n        choices={resourceTypeChoices}\n        source=\"type\"\n        defaultValue={\"solid\"}\n      />\n      <ColorInput source=\"color\" defaultValue={\"#000000\"} />\n    </SimpleForm>\n  </Create>\n);\n","export const resourceTypes = [\"solid\", \"liquid\"] as const;\nexport type ResourceType = typeof resourceTypes[number];\n\nexport class Resource<T extends ResourceType = ResourceType> {\n  constructor(\n    readonly id: string,\n    readonly name: string,\n    readonly color: string,\n    readonly type: T\n  ) {}\n}\n","import * as React from \"react\";\nimport {\n  List,\n  Datagrid,\n  TextField,\n  Edit,\n  SimpleForm,\n  TextInput,\n  ListProps,\n  EditProps,\n  Create,\n  CreateProps,\n  EditButton,\n  NumberField,\n  NumberInput,\n  ArrayInput,\n  SimpleFormIterator,\n  SelectInput,\n  required,\n  FilterProps,\n  Filter,\n  SearchInput,\n} from \"react-admin\";\nimport _ from \"lodash\";\nimport { DryBuilding } from \"./persistence/DryBuilding\";\nimport { ResourceType } from \"./domain/Resource\";\nimport { Tuple } from \"../utils/tuples\";\nimport { resourceTypeChoices } from \"./resources\";\n\nconst BuildingFilter: React.FC<Omit<FilterProps, \"children\">> = (props) => (\n  <Filter {...props}>\n    <SearchInput source=\"q\" alwaysOn />\n  </Filter>\n);\n\nexport const BuildingList: React.FC<ListProps> = (props) => (\n  <List {...props} filters={<BuildingFilter />}>\n    <Datagrid>\n      <TextField source=\"id\" />\n      <TextField source=\"name\" />\n      <NumberField source=\"powerConsumption\" />\n      <EditButton />\n    </Datagrid>\n  </List>\n);\n\ninterface DryBuildingTitleProps {\n  record?: DryBuilding<\n    Tuple<ResourceType, number>,\n    Tuple<ResourceType, number>\n  >;\n}\n\nconst BuildingTitle: React.FC<DryBuildingTitleProps> = ({ record }) =>\n  record ? (\n    <span>\n      Building #{record.id} - {record.name}\n    </span>\n  ) : null;\n\nexport const BuildingEdit: React.FC<EditProps> = (props) => (\n  <Edit\n    title={<BuildingTitle />}\n    {...props}\n    transform={(data) =>\n      data.id ? data : { ...data, id: _.camelCase(data.name) }\n    }\n  >\n    <SimpleForm>\n      <TextInput source=\"id\" />\n      <TextInput source=\"name\" validate={required()} />\n      <NumberInput source=\"powerConsumption\" validate={required()} />\n      <ArrayInput source=\"inputs\" defaultValue={[]}>\n        <SimpleFormIterator>\n          <SelectInput choices={resourceTypeChoices} />\n        </SimpleFormIterator>\n      </ArrayInput>\n      <ArrayInput source=\"outputs\" defaultValue={[]}>\n        <SimpleFormIterator>\n          <SelectInput choices={resourceTypeChoices} />\n        </SimpleFormIterator>\n      </ArrayInput>\n    </SimpleForm>\n  </Edit>\n);\n\nexport const BuildingCreate: React.FC<CreateProps> = (props) => (\n  <Create\n    title=\"Create a Building\"\n    {...props}\n    transform={(data) =>\n      data.id ? data : { ...data, id: _.camelCase(data.name) }\n    }\n  >\n    <SimpleForm>\n      <TextInput source=\"id\" />\n      <TextInput source=\"name\" validate={required()} />\n      <NumberInput source=\"powerConsumption\" validate={required()} />\n      <ArrayInput source=\"inputs\" defaultValue={[]}>\n        <SimpleFormIterator>\n          <SelectInput choices={resourceTypeChoices} />\n        </SimpleFormIterator>\n      </ArrayInput>\n      <ArrayInput source=\"outputs\" defaultValue={[]}>\n        <SimpleFormIterator>\n          <SelectInput choices={resourceTypeChoices} />\n        </SimpleFormIterator>\n      </ArrayInput>\n    </SimpleForm>\n  </Create>\n);\n","import { Error as TSXError, Loading, useDataProvider } from \"react-admin\";\nimport { useState, useEffect } from \"react\";\nimport ReactFlow, {\n  Node,\n  Edge,\n  Controls,\n  Background,\n  BackgroundVariant,\n  ArrowHeadType,\n  useZoomPanHelper,\n  ReactFlowProvider,\n} from \"react-flow-renderer\";\nimport { DryBuilding } from \"../../persistence/DryBuilding\";\nimport { DryRecipe, DryResourceFlow } from \"../../persistence/DryRecipe\";\nimport { DryResource } from \"../../persistence/DryResource\";\nimport _ from \"lodash\";\nimport invert from \"invert-color\";\nimport { ResourceFlow } from \"../../domain/Recipe\";\nimport { Resource } from \"../../domain/Resource\";\nimport { getLayoutedElements } from \"../graph/layout\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStylesLoading = makeStyles({\n  container: {\n    height: \"auto\",\n    marginTop: 0,\n    flex: 1,\n  },\n});\n\nfunction hydrateFlow(dryFlow: DryResourceFlow, resources: Resource[]) {\n  const hydratedResource = resources.find(\n    (resource) => resource.id === dryFlow.resource\n  );\n  if (!hydratedResource) {\n    throw new Error(`missing resource ${dryFlow.resource}`);\n  }\n  return {\n    ...dryFlow,\n    resource: hydratedResource,\n  };\n}\n\nfunction flowToNode(type: string) {\n  return (flow: ResourceFlow) => {\n    const node: Node = {\n      id: `input_${flow.resource.id}`,\n      data: { label: flow.resource.name, flow: flow },\n      position: {\n        x: 0,\n        y: 0,\n      },\n      type: type,\n      style: {\n        backgroundColor: flow.resource.color,\n        borderColor: invert(flow.resource.color),\n        color: invert(flow.resource.color, true),\n      },\n    };\n    return node;\n  };\n}\n\nexport class Graph {\n  constructor(readonly nodes: Node[], readonly edges: Edge[]) {}\n  getLayoutedElements() {\n    return getLayoutedElements([...this.nodes, ...this.edges]);\n  }\n}\n\nconst RecipeGraphInner: React.FC<{ dryRecipe?: DryRecipe }> = ({\n  dryRecipe,\n}) => {\n  const loadingClasses = useStylesLoading();\n  const dataProvider = useDataProvider();\n  const [graph, setGraph] = useState<Graph>();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string>();\n  const { fitView } = useZoomPanHelper();\n  useEffect(() => {\n    if (dryRecipe) {\n      Promise.all([\n        dataProvider.getOne<DryBuilding>(\"buildings\", {\n          id: dryRecipe.building,\n        }),\n        dataProvider.getMany<DryResource>(\"resources\", {\n          ids: dryRecipe.inputs\n            .filter(_.negate(_.isNil))\n            .map((input) => input.resource),\n        }),\n        dataProvider.getMany<DryResource>(\"resources\", {\n          ids: dryRecipe.outputs\n            .filter(_.negate(_.isNil))\n            .map((output) => output.resource),\n        }),\n      ])\n        .then(\n          ([\n            { data: dryBuilding },\n            { data: inputResources },\n            { data: outputResources },\n          ]) => {\n            const inputResourceFlows: ResourceFlow[] = dryRecipe.inputs\n              .filter((dryFlow) => dryFlow?.resource)\n              .map((dryFlow) => hydrateFlow(dryFlow, inputResources));\n            const outputResourceFlows: ResourceFlow[] = dryRecipe.outputs\n              .filter((dryFlow) => dryFlow?.resource)\n              .map((dryFlow) => hydrateFlow(dryFlow, outputResources));\n            const buildingNode: Node = {\n              id: `building_${dryBuilding.id}`,\n              data: { label: dryBuilding.name },\n              position: {\n                x: 0,\n                y: 0,\n              },\n            };\n            const inputNodes = inputResourceFlows.map(flowToNode(\"input\"));\n            const outputNodes = outputResourceFlows.map(flowToNode(\"output\"));\n            const inputEdges: Edge[] = inputNodes.map((inputNode) => ({\n              id: `${inputNode.id}->${buildingNode.id}`,\n              source: inputNode.id,\n              target: buildingNode.id,\n              label: inputNode.data && `${inputNode.data.flow.flowRate}`,\n              animated: true,\n              type: \"smoothstep\",\n              arrowHeadType: ArrowHeadType.Arrow,\n            }));\n            const outputEdges: Edge[] = outputNodes.map((outputNode) => ({\n              id: `${buildingNode.id}->${outputNode.id}`,\n              source: buildingNode.id,\n              target: outputNode.id,\n              label: outputNode.data && `${outputNode.data.flow.flowRate}`,\n              animated: true,\n              type: \"smoothstep\",\n              arrowHeadType: ArrowHeadType.Arrow,\n            }));\n            const newGraph = new Graph(\n              [buildingNode, ...inputNodes, ...outputNodes],\n              [...inputEdges, ...outputEdges]\n            );\n            setGraph(newGraph);\n            setLoading(false);\n          }\n        )\n        .catch((error) => {\n          setError(error);\n          setLoading(false);\n        });\n    }\n  }, [dataProvider, dryRecipe, fitView]);\n\n  if (loading) return <Loading classes={loadingClasses} />;\n  if (error) return <TSXError error={error} />;\n  if (!graph) return null;\n  return (\n    <ReactFlow\n      maxZoom={10}\n      onLoad={() => fitView()}\n      snapToGrid={true}\n      nodesConnectable={false}\n      nodesDraggable={false}\n      elementsSelectable={false}\n      elements={graph.getLayoutedElements()}\n    >\n      <Controls showInteractive={false} />\n      <Background variant={BackgroundVariant.Dots} gap={12} size={1} />\n    </ReactFlow>\n  );\n};\n\nconst RecipeGraph: React.FC<{ dryRecipe?: DryRecipe }> = ({ dryRecipe }) => (\n  <ReactFlowProvider>\n    <RecipeGraphInner dryRecipe={dryRecipe} />\n  </ReactFlowProvider>\n);\n\nexport default RecipeGraph;\n","import { Elements, isNode, Position } from \"react-flow-renderer\";\nimport dagre from \"dagre\";\n\nexport const getLayoutedElements = (\n  elements: Elements,\n  direction: \"TB\" | \"LR\" = \"LR\"\n) => {\n  const dagreGraph = new dagre.graphlib.Graph({ directed: true });\n  dagreGraph.setDefaultEdgeLabel(() => ({}));\n  const isHorizontal = direction === \"LR\";\n  dagreGraph.setGraph({ rankdir: direction });\n  elements.forEach((el) => {\n    if (isNode(el)) {\n      dagreGraph.setNode(el.id, { width: 150, height: 50 });\n    } else {\n      dagreGraph.setEdge(el.source, el.target, {\n        width: el.label ? el.label.length * 10 : 50,\n        height: 50,\n      });\n    }\n  });\n  dagre.layout(dagreGraph);\n  return elements.map((el) => {\n    if (isNode(el)) {\n      const nodeWithPosition = dagreGraph.node(el.id);\n      el.targetPosition = isHorizontal ? Position.Left : Position.Top;\n      el.sourcePosition = isHorizontal ? Position.Right : Position.Bottom;\n      el.position = {\n        x: nodeWithPosition.x,\n        y: nodeWithPosition.y,\n      };\n    }\n    return el;\n  });\n};\n","import { useFormState } from \"react-final-form\";\nimport {\n  List,\n  Datagrid,\n  TextField,\n  ListProps,\n  Create,\n  SimpleForm,\n  TextInput,\n  NumberInput,\n  ArrayInput,\n  SimpleFormIterator,\n  SelectInput,\n  required,\n  CreateProps,\n  ReferenceInput,\n  ArrayField,\n  Edit,\n  EditProps,\n  ReferenceField,\n  SingleFieldList,\n  EditButton,\n  ChipField,\n  FilterProps,\n  TabbedForm,\n  FormTab,\n  FieldProps,\n} from \"react-admin\";\nimport _ from \"lodash\";\nimport { Tuple } from \"../utils/tuples\";\nimport { ResourceType } from \"./domain/Resource\";\nimport { DryRecipe } from \"./persistence/DryRecipe\";\nimport { useLocation } from \"react-router-dom\";\n\nimport { Filter, SearchInput } from \"react-admin\";\nimport RecipeGraph from \"./view/recipe/RecipeGraph\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Location } from \"history\";\n\nconst RecipeFilter: React.FC<Omit<FilterProps, \"children\">> = (props) => (\n  <Filter {...props}>\n    <SearchInput source=\"q\" alwaysOn />\n  </Filter>\n);\n\nexport const RecipeList: React.FC<ListProps> = (props) => (\n  <List {...props} filters={<RecipeFilter />}>\n    <Datagrid>\n      <TextField source=\"id\" />\n      <TextField source=\"name\" />\n      <ArrayField source=\"inputs\">\n        <SingleFieldList>\n          <ReferenceField label=\"Input\" source=\"resource\" reference=\"resources\">\n            <ChipField source=\"name\" />\n          </ReferenceField>\n        </SingleFieldList>\n      </ArrayField>\n      <ArrayField source=\"outputs\">\n        <SingleFieldList>\n          <ReferenceField\n            label=\"Output\"\n            source=\"resource\"\n            reference=\"resources\"\n          >\n            <ChipField source=\"name\" />\n          </ReferenceField>\n        </SingleFieldList>\n      </ArrayField>\n      <ReferenceField label=\"Building\" source=\"building\" reference=\"buildings\">\n        <TextField source=\"name\" />\n      </ReferenceField>\n      <EditButton />\n    </Datagrid>\n  </List>\n);\n\ninterface RecipeTitleProps {\n  record?: DryRecipe<Tuple<ResourceType, number>, Tuple<ResourceType, number>>;\n}\n\nconst RecipeTitle: React.FC<RecipeTitleProps> = ({ record }) =>\n  record ? (\n    <span>\n      Recipe #{record.id} - {record.name}\n    </span>\n  ) : null;\n\nconst GraphField: React.FC<FieldProps> = () => {\n  const dryRecipe = useFormState().values as DryRecipe | undefined;\n  return <RecipeGraph dryRecipe={dryRecipe} />;\n};\n\nconst useStylesEdit = makeStyles(() => ({\n  root: {\n    display: \"contents\",\n  },\n  main: {\n    flexDirection: \"column\",\n    flex: 1,\n  },\n  card: {\n    flex: 1,\n    flexDirection: \"column\",\n    display: \"flex\",\n  },\n}));\n\nconst useStylesForm = makeStyles(() => ({\n  form: {\n    display: \"contents\",\n  },\n  content: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    flex: 1,\n  },\n}));\n\nconst useStyles = makeStyles(() => ({\n  formTabContainer: {\n    display: \"contents\",\n  },\n  graphField: {\n    display: \"contents\",\n  },\n  form: {\n    display: \"contents\",\n  },\n}));\n\nfunction parseActiveTab(location: Location) {\n  const parts = location.pathname.split(\"/\");\n  return parts[3];\n}\n\nexport const RecipeEdit: React.FC<EditProps> = (props) => {\n  const location = useLocation();\n  const customClasses = useStyles();\n  const editClasses = useStylesEdit();\n  const tabbedFormClasses = useStylesForm();\n  const activeTab = parseActiveTab(location);\n  return (\n    <Edit\n      classes={activeTab === \"design\" ? editClasses : null}\n      title={<RecipeTitle />}\n      {...props}\n      transform={(data) =>\n        data.id ? data : { ...data, id: _.camelCase(data.name) }\n      }\n    >\n      <TabbedForm\n        className={activeTab === \"design\" ? customClasses.form : undefined}\n        classes={activeTab === \"design\" ? tabbedFormClasses : null}\n      >\n        <FormTab label=\"Properties\">\n          <TextInput source=\"id\" />\n          <TextInput source=\"name\" validate={required()} />\n          <ArrayInput source=\"inputs\" defaultValue={[]}>\n            <SimpleFormIterator>\n              <ReferenceInput\n                label=\"resource\"\n                source=\"resource\"\n                reference=\"resources\"\n                validate={required()}\n              >\n                <SelectInput optionText=\"name\" />\n              </ReferenceInput>\n              <NumberInput source=\"flowRate\" validate={required()} />\n            </SimpleFormIterator>\n          </ArrayInput>\n          <ArrayInput source=\"outputs\" defaultValue={[]}>\n            <SimpleFormIterator>\n              <ReferenceInput\n                label=\"resource\"\n                source=\"resource\"\n                reference=\"resources\"\n                validate={required()}\n              >\n                <SelectInput optionText=\"name\" />\n              </ReferenceInput>\n              <NumberInput source=\"flowRate\" validate={required()} />\n            </SimpleFormIterator>\n          </ArrayInput>\n          <ReferenceInput\n            label=\"building\"\n            source=\"building\"\n            reference=\"buildings\"\n            validate={required()}\n          >\n            <SelectInput optionText=\"name\" />\n          </ReferenceInput>\n        </FormTab>\n        <FormTab\n          contentClassName={customClasses.formTabContainer}\n          label=\"Design\"\n          path=\"design\"\n        >\n          {activeTab === \"design\" ? (\n            <GraphField\n              formClassName={customClasses.graphField}\n              source=\"design\"\n            />\n          ) : undefined}\n        </FormTab>\n      </TabbedForm>\n    </Edit>\n  );\n};\n\nexport const RecipeCreate: React.FC<CreateProps> = (props) => (\n  <Create\n    title=\"Create a Recipe\"\n    {...props}\n    transform={(data) =>\n      data.id ? data : { ...data, id: _.camelCase(data.name) }\n    }\n  >\n    <SimpleForm>\n      <TextInput source=\"id\" />\n      <TextInput source=\"name\" validate={required()} />\n      <ArrayInput source=\"inputs\" defaultValue={[]}>\n        <SimpleFormIterator>\n          <ReferenceInput\n            label=\"resource\"\n            source=\"resource\"\n            reference=\"resources\"\n            validate={required()}\n          >\n            <SelectInput optionText=\"name\" />\n          </ReferenceInput>\n          <NumberInput source=\"flowRate\" validate={required()} />\n        </SimpleFormIterator>\n      </ArrayInput>\n      <ArrayInput source=\"outputs\" defaultValue={[]}>\n        <SimpleFormIterator>\n          <ReferenceInput\n            label=\"resource\"\n            source=\"resource\"\n            reference=\"resources\"\n            validate={required()}\n          >\n            <SelectInput optionText=\"name\" />\n          </ReferenceInput>\n          <NumberInput source=\"flowRate\" validate={required()} />\n        </SimpleFormIterator>\n      </ArrayInput>\n      <ReferenceInput\n        label=\"building\"\n        source=\"building\"\n        reference=\"buildings\"\n        validate={required()}\n      >\n        <SelectInput optionText=\"name\" />\n      </ReferenceInput>\n    </SimpleForm>\n  </Create>\n);\n","import {\n  Box,\n  Grid,\n  Card,\n  CardContent,\n  CardHeader,\n  Typography,\n  Button,\n} from \"@material-ui/core\";\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\nimport CloudDownloadIcon from \"@material-ui/icons/CloudDownload\";\nimport { ChangeEvent, MouseEvent } from \"react\";\nimport { useDataProvider, useNotify } from \"react-admin\";\n\nconst Dashboard = () => {\n  const dataProvider = useDataProvider();\n  const notify = useNotify();\n  const onUpload = (event: ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (readEvent) => {\n        const read = readEvent.target?.result;\n        if (read && typeof read === \"string\") {\n          const db = JSON.parse(read);\n          dataProvider.import(db).then(() => {\n            event.target.value = \"\";\n            notify(\"Import successful\");\n          });\n        } else {\n          console.error(\"Could not read file\");\n        }\n      };\n      reader.readAsText(file, \"utf-8\");\n    }\n  };\n  const onDownload = (event: MouseEvent) => {\n    dataProvider.export().then((response: any) => {\n      const { db, key } = response.data;\n      if (db) {\n        const blob = new Blob([JSON.stringify(db, null, 2)], {\n          type: \"application/json\",\n        });\n        const fakeLink = document.createElement(\"a\");\n        fakeLink.style.display = \"none\";\n        document.body.appendChild(fakeLink);\n        if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n          // Manage IE11+ & Edge\n          window.navigator.msSaveOrOpenBlob(blob, `${key}.json`);\n        } else {\n          fakeLink.setAttribute(\"href\", URL.createObjectURL(blob));\n          fakeLink.setAttribute(\"download\", `${key}.json`);\n          fakeLink.click();\n        }\n      }\n    });\n  };\n\n  return (\n    <Box mt={2}>\n      <Grid\n        container\n        direction=\"column\"\n        justify=\"flex-start\"\n        alignItems=\"stretch\"\n        spacing={3}\n      >\n        <Grid item>\n          <Typography variant=\"h3\" component=\"h1\">\n            Welcome to the generic building game plant designer\n          </Typography>\n        </Grid>\n        <Grid item>\n          <Card>\n            <CardHeader title=\"Import/Export DB\" />\n            <CardContent>\n              <Grid container spacing={1}>\n                <Grid item>\n                  <input\n                    accept=\"application/json\"\n                    id=\"contained-button-file\"\n                    style={{ display: \"none\" }}\n                    type=\"file\"\n                    onChange={onUpload}\n                  />\n                  <label htmlFor=\"contained-button-file\">\n                    <Button\n                      variant=\"contained\"\n                      startIcon={<CloudUploadIcon />}\n                      component=\"span\"\n                    >\n                      Import\n                    </Button>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    startIcon={<CloudDownloadIcon />}\n                    onClick={onDownload}\n                  >\n                    Export\n                  </Button>\n                </Grid>\n              </Grid>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default Dashboard;\n","import * as React from \"react\";\nimport { Admin, Resource } from \"react-admin\";\nimport localStorageDataProviderExtended from \"./app/localStorageDataProviderExtended\";\nimport { ResourceList, ResourceCreate, ResourceEdit } from \"./app/resources\";\nimport { BuildingList, BuildingCreate, BuildingEdit } from \"./app/buildings\";\nimport { RecipeCreate, RecipeEdit, RecipeList } from \"./app/recipes\";\nimport Dashboard from \"./app/Dashboard\";\n\nconst dataProvider = localStorageDataProviderExtended({\n  defaultData: {},\n  localStorageKey: \"plantDesigner\",\n  localStorageUpdateDelay: 0,\n  loggingEnabled: true,\n});\n\nconst App = () => (\n  <Admin dataProvider={dataProvider} dashboard={Dashboard}>\n    <Resource\n      name=\"resources\"\n      list={ResourceList}\n      create={ResourceCreate}\n      edit={ResourceEdit}\n    />\n    <Resource\n      name=\"buildings\"\n      list={BuildingList}\n      create={BuildingCreate}\n      edit={BuildingEdit}\n    />\n    <Resource\n      name=\"recipes\"\n      list={RecipeList}\n      create={RecipeCreate}\n      edit={RecipeEdit}\n    />\n  </Admin>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}