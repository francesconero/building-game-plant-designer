{"version":3,"sources":["app/localStorageDataProviderExtended.ts","app/resources.tsx","app/domain/Resource.ts","app/buildings.tsx","app/recipes.tsx","app/Dashboard.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SwappableDataProvider","targetDataProvider","getList","resource","params","getOne","getMany","getManyReference","update","updateMany","create","delete","deleteMany","localStorageDataProviderExtended","swappableDataProvider","localStorageDataProvider","import","db","localStorage","setItem","localStorageKey","JSON","stringify","console","info","Promise","resolve","data","export","getItem","parse","key","resourceTypeChoices","map","t","id","name","ResourceFilter","props","Filter","SearchInput","source","alwaysOn","ResourceList","List","filters","Datagrid","TextField","EditButton","ResourceTitle","record","ResourceEdit","Edit","title","transform","_","camelCase","SimpleForm","TextInput","validate","required","SelectInput","choices","defaultValue","ResourceCreate","Create","BuildingFilter","BuildingList","NumberField","BuildingTitle","BuildingEdit","NumberInput","ArrayInput","SimpleFormIterator","BuildingCreate","RecipeFilter","RecipeList","ArrayField","SingleFieldList","ReferenceField","label","reference","ChipField","RecipeTitle","Graph","nodes","edges","GraphField","dataProvider","useDataProvider","dryRecipe","useFormState","values","useState","graph","setGraph","loading","setLoading","error","setError","useEffect","all","building","ids","inputs","filter","negate","isNil","input","outputs","output","then","dryBuilding","inputResources","outputResources","buildingNode","text","inputNodes","color","outputNodes","inputEdges","inputNode","from","to","outputEdges","outputNode","newGraph","catch","Loading","Error","style","position","height","width","left","right","top","bottom","fit","node","fill","properties","invert","RecipeEdit","TabbedForm","FormTab","ReferenceInput","optionText","RecipeCreate","Dashboard","notify","useNotify","Box","mt","Grid","container","direction","justify","alignItems","spacing","item","Typography","variant","component","Card","CardHeader","CardContent","accept","display","type","onChange","event","file","target","files","reader","FileReader","onload","readEvent","read","result","value","readAsText","htmlFor","Button","startIcon","onClick","response","blob","Blob","fakeLink","document","createElement","body","appendChild","window","navigator","msSaveOrOpenBlob","setAttribute","URL","createObjectURL","click","defaultData","localStorageUpdateDelay","loggingEnabled","App","Admin","dashboard","list","edit","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f3b057e7.chunk.js","sourcesContent":["import localStorageDataProvider, {\n  LocalStorageDataProviderParams,\n} from \"ra-data-local-storage\";\n\nimport {\n  CreateParams,\n  CreateResult,\n  DataProvider,\n  DeleteManyParams,\n  DeleteManyResult,\n  DeleteParams,\n  DeleteResult,\n  GetListParams,\n  GetListResult,\n  GetManyParams,\n  GetManyReferenceParams,\n  GetManyReferenceResult,\n  GetManyResult,\n  GetOneParams,\n  GetOneResult,\n  Record,\n  UpdateManyParams,\n  UpdateManyResult,\n  UpdateParams,\n  UpdateResult,\n} from \"react-admin\";\n\nclass SwappableDataProvider implements DataProvider {\n  constructor(public targetDataProvider: DataProvider) {}\n  getList: <RecordType extends Record = Record>(\n    resource: string,\n    params: GetListParams\n  ) => Promise<GetListResult<RecordType>> = (resource, params) => {\n    return this.targetDataProvider.getList(resource, params);\n  };\n  getOne: <RecordType extends Record = Record>(\n    resource: string,\n    params: GetOneParams\n  ) => Promise<GetOneResult<RecordType>> = (resource, params) => {\n    return this.targetDataProvider.getOne(resource, params);\n  };\n  getMany: <RecordType extends Record = Record>(\n    resource: string,\n    params: GetManyParams\n  ) => Promise<GetManyResult<RecordType>> = (resource, params) => {\n    return this.targetDataProvider.getMany(resource, params);\n  };\n  getManyReference: <RecordType extends Record = Record>(\n    resource: string,\n    params: GetManyReferenceParams\n  ) => Promise<GetManyReferenceResult<RecordType>> = (resource, params) => {\n    return this.targetDataProvider.getManyReference(resource, params);\n  };\n  update: <RecordType extends Record = Record>(\n    resource: string,\n    params: UpdateParams\n  ) => Promise<UpdateResult<RecordType>> = (resource, params) => {\n    return this.targetDataProvider.update(resource, params);\n  };\n  updateMany: (\n    resource: string,\n    params: UpdateManyParams\n  ) => Promise<UpdateManyResult> = (resource, params) => {\n    return this.targetDataProvider.updateMany(resource, params);\n  };\n  create: <RecordType extends Record = Record>(\n    resource: string,\n    params: CreateParams\n  ) => Promise<CreateResult<RecordType>> = (resource, params) => {\n    return this.targetDataProvider.create(resource, params);\n  };\n  delete: <RecordType extends Record = Record>(\n    resource: string,\n    params: DeleteParams\n  ) => Promise<DeleteResult<RecordType>> = (resource, params) => {\n    return this.targetDataProvider.delete(resource, params);\n  };\n  deleteMany: (\n    resource: string,\n    params: DeleteManyParams\n  ) => Promise<DeleteManyResult> = (resource, params) => {\n    return this.targetDataProvider.deleteMany(resource, params);\n  };\n  [key: string]: any;\n}\n\nconst localStorageDataProviderExtended = (\n  params: LocalStorageDataProviderParams\n): DataProvider => {\n  const swappableDataProvider = new SwappableDataProvider(\n    localStorageDataProvider(params)\n  );\n  return {\n    ...swappableDataProvider,\n    import: (db: any) => {\n      localStorage.setItem(params.localStorageKey, JSON.stringify(db));\n      swappableDataProvider.targetDataProvider = localStorageDataProvider(\n        params\n      );\n      console.info(\"Successfully imported DB\");\n      return Promise.resolve({ data: db });\n    },\n    export: () => {\n      const db = localStorage.getItem(params.localStorageKey);\n      if (db) {\n        return Promise.resolve({\n          data: {\n            db: JSON.parse(db),\n            key: params.localStorageKey,\n          },\n        });\n      } else {\n        return {};\n      }\n    },\n  };\n};\nexport default localStorageDataProviderExtended;\n","import * as React from \"react\";\nimport {\n  List,\n  Datagrid,\n  TextField,\n  Edit,\n  SimpleForm,\n  TextInput,\n  ListProps,\n  EditProps,\n  Create,\n  CreateProps,\n  EditButton,\n  SelectInput,\n  required,\n  FilterProps,\n  Filter,\n  SearchInput,\n} from \"react-admin\";\nimport { ColorField, ColorInput } from \"react-admin-color-input\";\nimport _ from \"lodash\";\nimport { DryResource } from \"./persistence/DryResource\";\nimport { ResourceType, resourceTypes } from \"./domain/Resource\";\n\nexport const resourceTypeChoices = resourceTypes.map((t) => ({\n  id: t,\n  name: t,\n}));\n\nconst ResourceFilter: React.FC<Omit<FilterProps, \"children\">> = (props) => (\n  <Filter {...props}>\n    <SearchInput source=\"q\" alwaysOn />\n  </Filter>\n);\n\nexport const ResourceList: React.FC<ListProps> = (props) => (\n  <List {...props} filters={<ResourceFilter />}>\n    <Datagrid>\n      <TextField source=\"id\" />\n      <TextField source=\"name\" />\n      <TextField source=\"type\" />\n      <ColorField source=\"color\" />\n      <EditButton />\n    </Datagrid>\n  </List>\n);\n\ninterface ResourceTitleProps {\n  record?: DryResource<ResourceType>;\n}\n\nconst ResourceTitle: React.FC<ResourceTitleProps> = ({ record }) =>\n  record ? (\n    <span>\n      Resource #{record.id} - {record.name}\n    </span>\n  ) : null;\n\nexport const ResourceEdit: React.FC<EditProps> = (props) => (\n  <Edit\n    title={<ResourceTitle />}\n    {...props}\n    transform={(data) =>\n      data.id ? data : { ...data, id: _.camelCase(data.name) }\n    }\n  >\n    <SimpleForm>\n      <TextInput source=\"id\" />\n      <TextInput source=\"name\" validate={required()} />\n      <SelectInput\n        choices={resourceTypeChoices}\n        source=\"type\"\n        validate={required()}\n        defaultValue={\"solid\"}\n      />\n      <ColorInput source=\"color\" defaultValue={\"#000000\"} />\n    </SimpleForm>\n  </Edit>\n);\n\nexport const ResourceCreate: React.FC<CreateProps> = (props) => (\n  <Create\n    title=\"Create a Resource\"\n    {...props}\n    transform={(data) =>\n      data.id ? data : { ...data, id: _.camelCase(data.name) }\n    }\n  >\n    <SimpleForm>\n      <TextInput source=\"id\" />\n      <TextInput source=\"name\" validate={required()} />\n      <SelectInput\n        choices={resourceTypeChoices}\n        source=\"type\"\n        defaultValue={\"solid\"}\n      />\n      <ColorInput source=\"color\" defaultValue={\"#000000\"} />\n    </SimpleForm>\n  </Create>\n);\n","export const resourceTypes = [\"solid\", \"liquid\"] as const;\nexport type ResourceType = typeof resourceTypes[number];\n\nexport class Resource<T extends ResourceType> {\n  constructor(\n    readonly id: string,\n    readonly name: string,\n    readonly color: string,\n    readonly type: T\n  ) {}\n}\n","import * as React from \"react\";\nimport {\n  List,\n  Datagrid,\n  TextField,\n  Edit,\n  SimpleForm,\n  TextInput,\n  ListProps,\n  EditProps,\n  Create,\n  CreateProps,\n  EditButton,\n  NumberField,\n  NumberInput,\n  ArrayInput,\n  SimpleFormIterator,\n  SelectInput,\n  required,\n  FilterProps,\n  Filter,\n  SearchInput,\n} from \"react-admin\";\nimport _ from \"lodash\";\nimport { DryBuilding } from \"./persistence/DryBuilding\";\nimport { ResourceType } from \"./domain/Resource\";\nimport { Tuple } from \"../utils/tuples\";\nimport { resourceTypeChoices } from \"./resources\";\n\nconst BuildingFilter: React.FC<Omit<FilterProps, \"children\">> = (props) => (\n  <Filter {...props}>\n    <SearchInput source=\"q\" alwaysOn />\n  </Filter>\n);\n\nexport const BuildingList: React.FC<ListProps> = (props) => (\n  <List {...props} filters={<BuildingFilter />}>\n    <Datagrid>\n      <TextField source=\"id\" />\n      <TextField source=\"name\" />\n      <NumberField source=\"powerConsumption\" />\n      <EditButton />\n    </Datagrid>\n  </List>\n);\n\ninterface DryBuildingTitleProps {\n  record?: DryBuilding<\n    Tuple<ResourceType, number>,\n    Tuple<ResourceType, number>\n  >;\n}\n\nconst BuildingTitle: React.FC<DryBuildingTitleProps> = ({ record }) =>\n  record ? (\n    <span>\n      Building #{record.id} - {record.name}\n    </span>\n  ) : null;\n\nexport const BuildingEdit: React.FC<EditProps> = (props) => (\n  <Edit\n    title={<BuildingTitle />}\n    {...props}\n    transform={(data) =>\n      data.id ? data : { ...data, id: _.camelCase(data.name) }\n    }\n  >\n    <SimpleForm>\n      <TextInput source=\"id\" />\n      <TextInput source=\"name\" validate={required()} />\n      <NumberInput source=\"powerConsumption\" validate={required()} />\n      <ArrayInput source=\"inputs\" defaultValue={[]}>\n        <SimpleFormIterator>\n          <SelectInput choices={resourceTypeChoices} />\n        </SimpleFormIterator>\n      </ArrayInput>\n      <ArrayInput source=\"outputs\" defaultValue={[]}>\n        <SimpleFormIterator>\n          <SelectInput choices={resourceTypeChoices} />\n        </SimpleFormIterator>\n      </ArrayInput>\n    </SimpleForm>\n  </Edit>\n);\n\nexport const BuildingCreate: React.FC<CreateProps> = (props) => (\n  <Create\n    title=\"Create a Building\"\n    {...props}\n    transform={(data) =>\n      data.id ? data : { ...data, id: _.camelCase(data.name) }\n    }\n  >\n    <SimpleForm>\n      <TextInput source=\"id\" />\n      <TextInput source=\"name\" validate={required()} />\n      <NumberInput source=\"powerConsumption\" validate={required()} />\n      <ArrayInput source=\"inputs\" defaultValue={[]}>\n        <SimpleFormIterator>\n          <SelectInput choices={resourceTypeChoices} />\n        </SimpleFormIterator>\n      </ArrayInput>\n      <ArrayInput source=\"outputs\" defaultValue={[]}>\n        <SimpleFormIterator>\n          <SelectInput choices={resourceTypeChoices} />\n        </SimpleFormIterator>\n      </ArrayInput>\n    </SimpleForm>\n  </Create>\n);\n","import { useState, useEffect } from \"react\";\nimport {\n  List,\n  Datagrid,\n  TextField,\n  ListProps,\n  Create,\n  SimpleForm,\n  TextInput,\n  NumberInput,\n  ArrayInput,\n  SimpleFormIterator,\n  SelectInput,\n  required,\n  CreateProps,\n  ReferenceInput,\n  ArrayField,\n  Edit,\n  EditProps,\n  ReferenceField,\n  SingleFieldList,\n  EditButton,\n  ChipField,\n  FilterProps,\n  TabbedForm,\n  FormTab,\n  Loading,\n  Error,\n  useDataProvider,\n  FieldProps,\n} from \"react-admin\";\nimport _ from \"lodash\";\nimport { Tuple } from \"../utils/tuples\";\nimport { ResourceType } from \"./domain/Resource\";\nimport { DryRecipe } from \"./persistence/DryRecipe\";\n\nimport { Filter, SearchInput } from \"react-admin\";\nimport { Canvas, EdgeData, Label, Node, NodeData, NodeProps } from \"reaflow\";\nimport { DryBuilding } from \"./persistence/DryBuilding\";\nimport { DryResource } from \"./persistence/DryResource\";\nimport { useFormState } from \"react-final-form\";\nimport invert from \"invert-color\";\n\nconst RecipeFilter: React.FC<Omit<FilterProps, \"children\">> = (props) => (\n  <Filter {...props}>\n    <SearchInput source=\"q\" alwaysOn />\n  </Filter>\n);\n\nexport const RecipeList: React.FC<ListProps> = (props) => (\n  <List {...props} filters={<RecipeFilter />}>\n    <Datagrid>\n      <TextField source=\"id\" />\n      <TextField source=\"name\" />\n      <ArrayField source=\"inputs\">\n        <SingleFieldList>\n          <ReferenceField label=\"Input\" source=\"resource\" reference=\"resources\">\n            <ChipField source=\"name\" />\n          </ReferenceField>\n        </SingleFieldList>\n      </ArrayField>\n      <ArrayField source=\"outputs\">\n        <SingleFieldList>\n          <ReferenceField\n            label=\"Output\"\n            source=\"resource\"\n            reference=\"resources\"\n          >\n            <ChipField source=\"name\" />\n          </ReferenceField>\n        </SingleFieldList>\n      </ArrayField>\n      <ReferenceField label=\"Building\" source=\"building\" reference=\"buildings\">\n        <TextField source=\"name\" />\n      </ReferenceField>\n      <EditButton />\n    </Datagrid>\n  </List>\n);\n\ninterface RecipeTitleProps {\n  record?: DryRecipe<Tuple<ResourceType, number>, Tuple<ResourceType, number>>;\n}\n\nconst RecipeTitle: React.FC<RecipeTitleProps> = ({ record }) =>\n  record ? (\n    <span>\n      Recipe #{record.id} - {record.name}\n    </span>\n  ) : null;\n\nclass Graph {\n  constructor(readonly nodes: NodeData[], readonly edges: EdgeData[]) {}\n}\n\nconst GraphField: React.FC<FieldProps> = () => {\n  const dataProvider = useDataProvider();\n  const dryRecipe = useFormState().values as DryRecipe | undefined;\n  const [graph, setGraph] = useState<Graph>();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string>();\n  useEffect(() => {\n    if (dryRecipe) {\n      Promise.all([\n        dataProvider.getOne<DryBuilding>(\"buildings\", {\n          id: dryRecipe.building,\n        }),\n        dataProvider.getMany<DryResource>(\"resources\", {\n          ids: dryRecipe.inputs\n            .filter(_.negate(_.isNil))\n            .map((input) => input.resource),\n        }),\n        dataProvider.getMany<DryResource>(\"resources\", {\n          ids: dryRecipe.outputs\n            .filter(_.negate(_.isNil))\n            .map((output) => output.resource),\n        }),\n      ])\n        .then(\n          ([\n            { data: dryBuilding },\n            { data: inputResources },\n            { data: outputResources },\n          ]) => {\n            const buildingNode: NodeData = {\n              id: `building_${dryBuilding.id}`,\n              text: dryBuilding.name,\n            };\n            const inputNodes: NodeData[] = inputResources.map((resource) => ({\n              id: `input_${resource.id}`,\n              text: resource.name,\n              data: {\n                color: resource.color,\n              },\n            }));\n            const outputNodes: NodeData[] = outputResources.map((resource) => ({\n              id: `output_${resource.id}`,\n              text: resource.name,\n              data: {\n                color: resource.color,\n              },\n            }));\n            const inputEdges: EdgeData[] = inputNodes.map((inputNode) => ({\n              id: `${inputNode.id}->${buildingNode.id}`,\n              from: inputNode.id,\n              to: buildingNode.id,\n            }));\n            const outputEdges: EdgeData[] = outputNodes.map((outputNode) => ({\n              id: `${buildingNode.id}->${outputNode.id}`,\n              from: buildingNode.id,\n              to: outputNode.id,\n            }));\n            const newGraph = new Graph(\n              [buildingNode, ...inputNodes, ...outputNodes],\n              [...inputEdges, ...outputEdges]\n            );\n            setGraph(newGraph);\n            setLoading(false);\n          }\n        )\n        .catch((error) => {\n          setError(error);\n          setLoading(false);\n        });\n    }\n  }, [dataProvider, dryRecipe]);\n\n  if (loading) return <Loading />;\n  if (error) return <Error error={error} />;\n  if (!graph) return null;\n  return (\n    <div style={{ position: \"relative\", height: 500, width: \"100%\" }}>\n      <div\n        style={{\n          position: \"absolute\",\n          left: 0,\n          right: 0,\n          top: 0,\n          bottom: 0,\n        }}\n      >\n        <Canvas\n          fit={true}\n          nodes={graph.nodes}\n          edges={graph.edges}\n          node={(node: NodeProps) => (\n            <Node\n              {...node}\n              style={{\n                fill: node.properties.data?.color || \"#123456\",\n              }}\n              label={\n                <Label\n                  style={{\n                    fill: invert(\n                      node.properties.data?.color || \"#123456\",\n                      true\n                    ),\n                  }}\n                ></Label>\n              }\n            ></Node>\n          )}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport const RecipeEdit: React.FC<EditProps> = (props) => {\n  return (\n    <Edit\n      title={<RecipeTitle />}\n      {...props}\n      transform={(data) =>\n        data.id ? data : { ...data, id: _.camelCase(data.name) }\n      }\n    >\n      <TabbedForm>\n        <FormTab label=\"Properties\">\n          <TextInput source=\"id\" />\n          <TextInput source=\"name\" validate={required()} />\n          <ArrayInput source=\"inputs\" defaultValue={[]}>\n            <SimpleFormIterator>\n              <ReferenceInput\n                label=\"resource\"\n                source=\"resource\"\n                reference=\"resources\"\n                validate={required()}\n              >\n                <SelectInput optionText=\"name\" />\n              </ReferenceInput>\n              <NumberInput source=\"flowRate\" validate={required()} />\n            </SimpleFormIterator>\n          </ArrayInput>\n          <ArrayInput source=\"outputs\" defaultValue={[]}>\n            <SimpleFormIterator>\n              <ReferenceInput\n                label=\"resource\"\n                source=\"resource\"\n                reference=\"resources\"\n                validate={required()}\n              >\n                <SelectInput optionText=\"name\" />\n              </ReferenceInput>\n              <NumberInput source=\"flowRate\" validate={required()} />\n            </SimpleFormIterator>\n          </ArrayInput>\n          <ReferenceInput\n            label=\"building\"\n            source=\"building\"\n            reference=\"buildings\"\n            validate={required()}\n          >\n            <SelectInput optionText=\"name\" />\n          </ReferenceInput>\n        </FormTab>\n        <FormTab label=\"Design\">\n          <GraphField />\n        </FormTab>\n      </TabbedForm>\n    </Edit>\n  );\n};\n\nexport const RecipeCreate: React.FC<CreateProps> = (props) => (\n  <Create\n    title=\"Create a Recipe\"\n    {...props}\n    transform={(data) =>\n      data.id ? data : { ...data, id: _.camelCase(data.name) }\n    }\n  >\n    <SimpleForm>\n      <TextInput source=\"id\" />\n      <TextInput source=\"name\" validate={required()} />\n      <ArrayInput source=\"inputs\" defaultValue={[]}>\n        <SimpleFormIterator>\n          <ReferenceInput\n            label=\"resource\"\n            source=\"resource\"\n            reference=\"resources\"\n            validate={required()}\n          >\n            <SelectInput optionText=\"name\" />\n          </ReferenceInput>\n          <NumberInput source=\"flowRate\" validate={required()} />\n        </SimpleFormIterator>\n      </ArrayInput>\n      <ArrayInput source=\"outputs\" defaultValue={[]}>\n        <SimpleFormIterator>\n          <ReferenceInput\n            label=\"resource\"\n            source=\"resource\"\n            reference=\"resources\"\n            validate={required()}\n          >\n            <SelectInput optionText=\"name\" />\n          </ReferenceInput>\n          <NumberInput source=\"flowRate\" validate={required()} />\n        </SimpleFormIterator>\n      </ArrayInput>\n      <ReferenceInput\n        label=\"building\"\n        source=\"building\"\n        reference=\"buildings\"\n        validate={required()}\n      >\n        <SelectInput optionText=\"name\" />\n      </ReferenceInput>\n    </SimpleForm>\n  </Create>\n);\n","import {\n  Box,\n  Grid,\n  Card,\n  CardContent,\n  CardHeader,\n  Typography,\n  Button,\n} from \"@material-ui/core\";\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\nimport CloudDownloadIcon from \"@material-ui/icons/CloudDownload\";\nimport { ChangeEvent, MouseEvent } from \"react\";\nimport { useDataProvider, useNotify } from \"react-admin\";\n\nconst Dashboard = () => {\n  const dataProvider = useDataProvider();\n  const notify = useNotify();\n  const onUpload = (event: ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (readEvent) => {\n        const read = readEvent.target?.result;\n        if (read && typeof read === \"string\") {\n          const db = JSON.parse(read);\n          dataProvider.import(db).then(() => {\n            event.target.value = \"\";\n            notify(\"Import successful\");\n          });\n        } else {\n          console.error(\"Could not read file\");\n        }\n      };\n      reader.readAsText(file, \"utf-8\");\n    }\n  };\n  const onDownload = (event: MouseEvent) => {\n    dataProvider.export().then((response: any) => {\n      const { db, key } = response.data;\n      if (db) {\n        const blob = new Blob([JSON.stringify(db, null, 2)], {\n          type: \"application/json\",\n        });\n        const fakeLink = document.createElement(\"a\");\n        fakeLink.style.display = \"none\";\n        document.body.appendChild(fakeLink);\n        if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n          // Manage IE11+ & Edge\n          window.navigator.msSaveOrOpenBlob(blob, `${key}.json`);\n        } else {\n          fakeLink.setAttribute(\"href\", URL.createObjectURL(blob));\n          fakeLink.setAttribute(\"download\", `${key}.json`);\n          fakeLink.click();\n        }\n      }\n    });\n  };\n\n  return (\n    <Box mt={2}>\n      <Grid\n        container\n        direction=\"column\"\n        justify=\"flex-start\"\n        alignItems=\"stretch\"\n        spacing={3}\n      >\n        <Grid item>\n          <Typography variant=\"h3\" component=\"h1\">\n            Welcome to the generic building game plant designer\n          </Typography>\n        </Grid>\n        <Grid item>\n          <Card>\n            <CardHeader title=\"Import/Export DB\" />\n            <CardContent>\n              <Grid container spacing={1}>\n                <Grid item>\n                  <input\n                    accept=\"application/json\"\n                    id=\"contained-button-file\"\n                    style={{ display: \"none\" }}\n                    type=\"file\"\n                    onChange={onUpload}\n                  />\n                  <label htmlFor=\"contained-button-file\">\n                    <Button\n                      variant=\"contained\"\n                      startIcon={<CloudUploadIcon />}\n                      component=\"span\"\n                    >\n                      Import\n                    </Button>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    startIcon={<CloudDownloadIcon />}\n                    onClick={onDownload}\n                  >\n                    Export\n                  </Button>\n                </Grid>\n              </Grid>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default Dashboard;\n","import * as React from \"react\";\nimport { Admin, Resource } from \"react-admin\";\nimport localStorageDataProviderExtended from \"./app/localStorageDataProviderExtended\";\nimport { ResourceList, ResourceCreate, ResourceEdit } from \"./app/resources\";\nimport { BuildingList, BuildingCreate, BuildingEdit } from \"./app/buildings\";\nimport { RecipeCreate, RecipeEdit, RecipeList } from \"./app/recipes\";\nimport Dashboard from \"./app/Dashboard\";\n\nconst dataProvider = localStorageDataProviderExtended({\n  defaultData: {},\n  localStorageKey: \"plantDesigner\",\n  localStorageUpdateDelay: 0,\n  loggingEnabled: true,\n});\n\nconst App = () => (\n  <Admin dataProvider={dataProvider} dashboard={Dashboard}>\n    <Resource\n      name=\"resources\"\n      list={ResourceList}\n      create={ResourceCreate}\n      edit={ResourceEdit}\n    />\n    <Resource\n      name=\"buildings\"\n      list={BuildingList}\n      create={BuildingCreate}\n      edit={BuildingEdit}\n    />\n    <Resource\n      name=\"recipes\"\n      list={RecipeList}\n      create={RecipeCreate}\n      edit={RecipeEdit}\n    />\n  </Admin>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}