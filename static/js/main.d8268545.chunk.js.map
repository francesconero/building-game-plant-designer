{"version":3,"sources":["app/localStorageDataProviderExtended.ts","app/resources.tsx","app/domain/Resource.ts","app/buildings.tsx","app/domain/Recipe.ts","app/persistence/DryRecipe.ts","app/view/recipe/loadingStyles.ts","app/view/graph/Diagram.tsx","app/view/graph/Graph.ts","app/view/recipe/RecipeGraph.tsx","app/recipes.tsx","app/Dashboard.tsx","app/plants.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SwappableDataProvider","targetDataProvider","getList","resource","params","getOne","getMany","getManyReference","update","updateMany","create","delete","deleteMany","localStorageDataProviderExtended","swappableDataProvider","localStorageDataProvider","import","db","localStorage","setItem","localStorageKey","JSON","stringify","console","info","Promise","resolve","data","export","getItem","parse","key","resourceTypeChoices","map","t","id","name","ResourceFilter","props","Filter","SearchInput","source","alwaysOn","ResourceList","List","filters","Datagrid","TextField","EditButton","ResourceTitle","record","ResourceEdit","Edit","title","transform","_","camelCase","SimpleForm","TextInput","validate","required","SelectInput","choices","defaultValue","ResourceCreate","Create","BuildingFilter","BuildingList","NumberField","BuildingTitle","BuildingEdit","NumberInput","ArrayInput","SimpleFormIterator","BuildingCreate","Recipe","inputs","outputs","building","hydrateRecipe","dryRecipe","dataProvider","all","ids","filter","negate","isNil","input","output","then","dryBuilding","inputResources","outputResources","inputResourceFlows","dryFlow","hydrateFlow","outputResourceFlows","resources","hydratedResource","find","Error","useLoadingStyles","makeStyles","container","height","marginTop","flex","Diagram","graph","fitView","useZoomPanHelper","maxZoom","onLoad","snapToGrid","nodesConnectable","nodesDraggable","elementsSelectable","elements","getLayoutedElements","showInteractive","variant","BackgroundVariant","Dots","gap","size","Graph","nodes","edges","this","direction","getElements","dagreGraph","dagre","graphlib","directed","setDefaultEdgeLabel","isHorizontal","setGraph","rankdir","forEach","el","isNode","setNode","width","setEdge","target","label","length","layout","nodeWithPosition","node","targetPosition","Position","Left","Top","sourcePosition","Right","Bottom","position","x","y","flowNodeId","flowDirection","flow","buildingId","flowEdgeId","flowToEdge","flowRate","animated","type","arrowHeadType","ArrowHeadType","Arrow","flowToNode","style","backgroundColor","color","borderColor","invert","a","recipe","recipeToGraph","buildingNode","inputNodes","outputNodes","inputEdges","outputEdges","RecipeGraphInner","loadingClasses","useDataProvider","useState","loading","setLoading","error","setError","useEffect","buildGraph","newGraph","catch","Loading","classes","RecipeGraph","RecipeFilter","RecipeList","ArrayField","SingleFieldList","ReferenceField","reference","ChipField","RecipeTitle","GraphField","useFormState","values","useStylesEdit","root","display","main","flexDirection","card","useStylesForm","form","content","useStyles","formTabContainer","graphField","RecipeEdit","location","useLocation","customClasses","editClasses","tabbedFormClasses","activeTab","pathname","split","parseActiveTab","TabbedForm","className","undefined","FormTab","ReferenceInput","optionText","contentClassName","path","formClassName","RecipeCreate","Dashboard","notify","useNotify","Box","mt","Grid","justify","alignItems","spacing","item","Typography","component","Card","CardHeader","CardContent","accept","onChange","event","file","files","reader","FileReader","onload","readEvent","read","result","value","readAsText","htmlFor","Button","startIcon","onClick","response","blob","Blob","fakeLink","document","createElement","body","appendChild","window","navigator","msSaveOrOpenBlob","setAttribute","URL","createObjectURL","click","PlantFilter","CustomLabelChipField","renderLabel","rest","ResourceFlowField","innerRecord","theme","link","palette","primary","PlantList","ReferenceArrayField","defaultData","localStorageUpdateDelay","loggingEnabled","App","Admin","dashboard","list","edit","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d8268545.chunk.js","sourcesContent":["import localStorageDataProvider, {\n  LocalStorageDataProviderParams,\n} from \"ra-data-local-storage\";\n\nimport {\n  CreateParams,\n  CreateResult,\n  DataProvider,\n  DeleteManyParams,\n  DeleteManyResult,\n  DeleteParams,\n  DeleteResult,\n  GetListParams,\n  GetListResult,\n  GetManyParams,\n  GetManyReferenceParams,\n  GetManyReferenceResult,\n  GetManyResult,\n  GetOneParams,\n  GetOneResult,\n  Record,\n  UpdateManyParams,\n  UpdateManyResult,\n  UpdateParams,\n  UpdateResult,\n} from \"react-admin\";\n\nclass SwappableDataProvider implements DataProvider {\n  constructor(public targetDataProvider: DataProvider) {}\n  getList: <RecordType extends Record = Record>(\n    resource: string,\n    params: GetListParams\n  ) => Promise<GetListResult<RecordType>> = (resource, params) => {\n    return this.targetDataProvider.getList(resource, params);\n  };\n  getOne: <RecordType extends Record = Record>(\n    resource: string,\n    params: GetOneParams\n  ) => Promise<GetOneResult<RecordType>> = (resource, params) => {\n    return this.targetDataProvider.getOne(resource, params);\n  };\n  getMany: <RecordType extends Record = Record>(\n    resource: string,\n    params: GetManyParams\n  ) => Promise<GetManyResult<RecordType>> = (resource, params) => {\n    return this.targetDataProvider.getMany(resource, params);\n  };\n  getManyReference: <RecordType extends Record = Record>(\n    resource: string,\n    params: GetManyReferenceParams\n  ) => Promise<GetManyReferenceResult<RecordType>> = (resource, params) => {\n    return this.targetDataProvider.getManyReference(resource, params);\n  };\n  update: <RecordType extends Record = Record>(\n    resource: string,\n    params: UpdateParams\n  ) => Promise<UpdateResult<RecordType>> = (resource, params) => {\n    return this.targetDataProvider.update(resource, params);\n  };\n  updateMany: (\n    resource: string,\n    params: UpdateManyParams\n  ) => Promise<UpdateManyResult> = (resource, params) => {\n    return this.targetDataProvider.updateMany(resource, params);\n  };\n  create: <RecordType extends Record = Record>(\n    resource: string,\n    params: CreateParams\n  ) => Promise<CreateResult<RecordType>> = (resource, params) => {\n    return this.targetDataProvider.create(resource, params);\n  };\n  delete: <RecordType extends Record = Record>(\n    resource: string,\n    params: DeleteParams\n  ) => Promise<DeleteResult<RecordType>> = (resource, params) => {\n    return this.targetDataProvider.delete(resource, params);\n  };\n  deleteMany: (\n    resource: string,\n    params: DeleteManyParams\n  ) => Promise<DeleteManyResult> = (resource, params) => {\n    return this.targetDataProvider.deleteMany(resource, params);\n  };\n  [key: string]: any;\n}\n\nconst localStorageDataProviderExtended = (\n  params: LocalStorageDataProviderParams\n): DataProvider => {\n  const swappableDataProvider = new SwappableDataProvider(\n    localStorageDataProvider(params)\n  );\n  return {\n    ...swappableDataProvider,\n    import: (db: any) => {\n      localStorage.setItem(params.localStorageKey, JSON.stringify(db));\n      swappableDataProvider.targetDataProvider = localStorageDataProvider(\n        params\n      );\n      console.info(\"Successfully imported DB\");\n      return Promise.resolve({ data: db });\n    },\n    export: () => {\n      const db = localStorage.getItem(params.localStorageKey);\n      if (db) {\n        return Promise.resolve({\n          data: {\n            db: JSON.parse(db),\n            key: params.localStorageKey,\n          },\n        });\n      } else {\n        return Promise.resolve({ data: {} });\n      }\n    },\n  };\n};\nexport default localStorageDataProviderExtended;\n","import * as React from \"react\";\nimport {\n  List,\n  Datagrid,\n  TextField,\n  Edit,\n  SimpleForm,\n  TextInput,\n  ListProps,\n  EditProps,\n  Create,\n  CreateProps,\n  EditButton,\n  SelectInput,\n  required,\n  FilterProps,\n  Filter,\n  SearchInput,\n} from \"react-admin\";\nimport { ColorField, ColorInput } from \"react-admin-color-input\";\nimport _ from \"lodash\";\nimport { DryResource } from \"./persistence/DryResource\";\nimport { ResourceType, resourceTypes } from \"./domain/Resource\";\n\nexport const resourceTypeChoices = resourceTypes.map((t) => ({\n  id: t,\n  name: t,\n}));\n\nconst ResourceFilter: React.FC<Omit<FilterProps, \"children\">> = (props) => (\n  <Filter {...props}>\n    <SearchInput source=\"q\" alwaysOn />\n  </Filter>\n);\n\nexport const ResourceList: React.FC<ListProps> = (props) => (\n  <List {...props} filters={<ResourceFilter />}>\n    <Datagrid>\n      <TextField source=\"id\" />\n      <TextField source=\"name\" />\n      <TextField source=\"type\" />\n      <ColorField source=\"color\" />\n      <EditButton />\n    </Datagrid>\n  </List>\n);\n\ninterface ResourceTitleProps {\n  record?: DryResource<ResourceType>;\n}\n\nconst ResourceTitle: React.FC<ResourceTitleProps> = ({ record }) =>\n  record ? (\n    <span>\n      Resource #{record.id} - {record.name}\n    </span>\n  ) : null;\n\nexport const ResourceEdit: React.FC<EditProps> = (props) => (\n  <Edit\n    title={<ResourceTitle />}\n    {...props}\n    transform={(data) =>\n      data.id ? data : { ...data, id: _.camelCase(data.name) }\n    }\n  >\n    <SimpleForm>\n      <TextInput source=\"id\" />\n      <TextInput source=\"name\" validate={required()} />\n      <SelectInput\n        choices={resourceTypeChoices}\n        source=\"type\"\n        validate={required()}\n        defaultValue={\"solid\"}\n      />\n      <ColorInput source=\"color\" defaultValue={\"#000000\"} />\n    </SimpleForm>\n  </Edit>\n);\n\nexport const ResourceCreate: React.FC<CreateProps> = (props) => (\n  <Create\n    title=\"Create a Resource\"\n    {...props}\n    transform={(data) =>\n      data.id ? data : { ...data, id: _.camelCase(data.name) }\n    }\n  >\n    <SimpleForm>\n      <TextInput source=\"id\" />\n      <TextInput source=\"name\" validate={required()} />\n      <SelectInput\n        choices={resourceTypeChoices}\n        source=\"type\"\n        defaultValue={\"solid\"}\n      />\n      <ColorInput source=\"color\" defaultValue={\"#000000\"} />\n    </SimpleForm>\n  </Create>\n);\n","export const resourceTypes = [\"solid\", \"liquid\"] as const;\nexport type ResourceType = typeof resourceTypes[number];\n\nexport class Resource<T extends ResourceType = ResourceType> {\n  constructor(\n    readonly id: string,\n    readonly name: string,\n    readonly color: string,\n    readonly type: T\n  ) {}\n}\n","import * as React from \"react\";\nimport {\n  List,\n  Datagrid,\n  TextField,\n  Edit,\n  SimpleForm,\n  TextInput,\n  ListProps,\n  EditProps,\n  Create,\n  CreateProps,\n  EditButton,\n  NumberField,\n  NumberInput,\n  ArrayInput,\n  SimpleFormIterator,\n  SelectInput,\n  required,\n  FilterProps,\n  Filter,\n  SearchInput,\n} from \"react-admin\";\nimport _ from \"lodash\";\nimport { DryBuilding } from \"./persistence/DryBuilding\";\nimport { ResourceType } from \"./domain/Resource\";\nimport { Tuple } from \"../utils/tuples\";\nimport { resourceTypeChoices } from \"./resources\";\n\nconst BuildingFilter: React.FC<Omit<FilterProps, \"children\">> = (props) => (\n  <Filter {...props}>\n    <SearchInput source=\"q\" alwaysOn />\n  </Filter>\n);\n\nexport const BuildingList: React.FC<ListProps> = (props) => (\n  <List {...props} filters={<BuildingFilter />}>\n    <Datagrid>\n      <TextField source=\"id\" />\n      <TextField source=\"name\" />\n      <NumberField source=\"powerConsumption\" />\n      <EditButton />\n    </Datagrid>\n  </List>\n);\n\ninterface DryBuildingTitleProps {\n  record?: DryBuilding<\n    Tuple<ResourceType, number>,\n    Tuple<ResourceType, number>\n  >;\n}\n\nconst BuildingTitle: React.FC<DryBuildingTitleProps> = ({ record }) =>\n  record ? (\n    <span>\n      Building #{record.id} - {record.name}\n    </span>\n  ) : null;\n\nexport const BuildingEdit: React.FC<EditProps> = (props) => (\n  <Edit\n    title={<BuildingTitle />}\n    {...props}\n    transform={(data) =>\n      data.id ? data : { ...data, id: _.camelCase(data.name) }\n    }\n  >\n    <SimpleForm>\n      <TextInput source=\"id\" />\n      <TextInput source=\"name\" validate={required()} />\n      <NumberInput source=\"powerConsumption\" validate={required()} />\n      <ArrayInput source=\"inputs\" defaultValue={[]}>\n        <SimpleFormIterator>\n          <SelectInput choices={resourceTypeChoices} />\n        </SimpleFormIterator>\n      </ArrayInput>\n      <ArrayInput source=\"outputs\" defaultValue={[]}>\n        <SimpleFormIterator>\n          <SelectInput choices={resourceTypeChoices} />\n        </SimpleFormIterator>\n      </ArrayInput>\n    </SimpleForm>\n  </Edit>\n);\n\nexport const BuildingCreate: React.FC<CreateProps> = (props) => (\n  <Create\n    title=\"Create a Building\"\n    {...props}\n    transform={(data) =>\n      data.id ? data : { ...data, id: _.camelCase(data.name) }\n    }\n  >\n    <SimpleForm>\n      <TextInput source=\"id\" />\n      <TextInput source=\"name\" validate={required()} />\n      <NumberInput source=\"powerConsumption\" validate={required()} />\n      <ArrayInput source=\"inputs\" defaultValue={[]}>\n        <SimpleFormIterator>\n          <SelectInput choices={resourceTypeChoices} />\n        </SimpleFormIterator>\n      </ArrayInput>\n      <ArrayInput source=\"outputs\" defaultValue={[]}>\n        <SimpleFormIterator>\n          <SelectInput choices={resourceTypeChoices} />\n        </SimpleFormIterator>\n      </ArrayInput>\n    </SimpleForm>\n  </Create>\n);\n","import { Tuple } from \"../../utils/tuples\";\nimport { Building } from \"./Building\";\nimport { Resource, ResourceType } from \"./Resource\";\n\nexport class ResourceFlow<\n  T extends Resource<ResourceType> = Resource<ResourceType>\n> {\n  constructor(readonly resource: T, readonly flowRate: number) {}\n}\n\nexport type FLOWS = Tuple<ResourceType, number>;\n\ntype RESOURCE_FLOWS<T extends FLOWS> = {\n  [P in keyof T]: [T[P]] extends [ResourceType]\n    ? ResourceFlow<Resource<T[P]>>\n    : never;\n};\n\nexport class Recipe<\n  INPUTS extends FLOWS = Array<ResourceType>,\n  OUTPUTS extends FLOWS = Array<ResourceType>\n> {\n  constructor(\n    readonly id: string,\n    readonly name: string,\n    readonly inputs: RESOURCE_FLOWS<INPUTS>,\n    readonly outputs: RESOURCE_FLOWS<OUTPUTS>,\n    readonly building: Building<INPUTS, OUTPUTS>\n  ) {}\n}\n","import { isNil, negate } from \"lodash\";\nimport { DataProvider } from \"react-admin\";\nimport { Building } from \"../domain/Building\";\nimport { FLOWS, Recipe, ResourceFlow } from \"../domain/Recipe\";\nimport { Resource, ResourceType } from \"../domain/Resource\";\nimport { DryBuilding } from \"./DryBuilding\";\nimport { DryResource } from \"./DryResource\";\n\nexport class DryResourceFlow<T extends ResourceType = ResourceType> {\n  constructor(\n    readonly resource: string,\n    readonly resourceType: T,\n    readonly flowRate: number\n  ) {}\n}\n\nexport type DRY_RESOURCE_FLOWS<T extends FLOWS> = {\n  [P in keyof T]: [T[P]] extends [ResourceType] ? DryResourceFlow<T[P]> : never;\n};\n\nexport class DryRecipe<\n  INPUTS extends FLOWS = Array<ResourceType>,\n  OUTPUTS extends FLOWS = Array<ResourceType>\n> {\n  constructor(\n    readonly id: string,\n    readonly name: string,\n    readonly inputs: DRY_RESOURCE_FLOWS<INPUTS>,\n    readonly outputs: DRY_RESOURCE_FLOWS<OUTPUTS>,\n    readonly building: string\n  ) {}\n}\n\nexport function hydrateRecipe(\n  dryRecipe: DryRecipe,\n  dataProvider: DataProvider\n): Promise<Recipe> {\n  return Promise.all([\n    dataProvider.getOne<DryBuilding>(\"buildings\", {\n      id: dryRecipe.building,\n    }),\n    dataProvider.getMany<DryResource>(\"resources\", {\n      ids: dryRecipe.inputs\n        .filter(negate(isNil))\n        .map((input) => input.resource),\n    }),\n    dataProvider.getMany<DryResource>(\"resources\", {\n      ids: dryRecipe.outputs\n        .filter(negate(isNil))\n        .map((output) => output.resource),\n    }),\n  ]).then(\n    ([\n      { data: dryBuilding },\n      { data: inputResources },\n      { data: outputResources },\n    ]) => {\n      const inputResourceFlows = dryRecipe.inputs\n        .filter((dryFlow) => dryFlow?.resource)\n        .map((dryFlow) => hydrateFlow(dryFlow, inputResources));\n      const outputResourceFlows = dryRecipe.outputs\n        .filter((dryFlow) => dryFlow?.resource)\n        .map((dryFlow) => hydrateFlow(dryFlow, outputResources));\n\n      const building: Building = dryBuilding;\n\n      return new Recipe(\n        dryRecipe.id,\n        dryRecipe.name,\n        inputResourceFlows,\n        outputResourceFlows,\n        building\n      );\n    }\n  );\n}\n\nexport function hydrateFlow<T extends Resource<R>, R extends ResourceType>(\n  dryFlow: DryResourceFlow<R>,\n  resources: T[]\n): ResourceFlow<Resource<R>> {\n  const hydratedResource = resources.find(\n    (resource) => resource.id === dryFlow.resource\n  );\n  if (!hydratedResource) {\n    throw new Error(`missing resource ${dryFlow.resource}`);\n  }\n  return {\n    ...dryFlow,\n    resource: hydratedResource,\n  };\n}\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nexport const useLoadingStyles = makeStyles({\n  container: {\n    height: \"auto\",\n    marginTop: 0,\n    flex: 1,\n  },\n});\n","import ReactFlow, {\n  Controls,\n  Background,\n  BackgroundVariant,\n  useZoomPanHelper,\n} from \"react-flow-renderer\";\nimport { Graph } from \"./Graph\";\n\nexport const Diagram: React.FC<{\n  graph: Graph;\n}> = ({ graph }) => {\n  const { fitView } = useZoomPanHelper();\n  return (\n    <ReactFlow\n      maxZoom={10}\n      onLoad={() => fitView()}\n      snapToGrid={true}\n      nodesConnectable={false}\n      nodesDraggable={true}\n      elementsSelectable={false}\n      elements={graph.getLayoutedElements()}\n    >\n      <Controls showInteractive={false} />\n      <Background variant={BackgroundVariant.Dots} gap={12} size={1} />\n    </ReactFlow>\n  );\n};\n","import { Node, Edge, ArrowHeadType } from \"react-flow-renderer\";\nimport { isNode, Position } from \"react-flow-renderer\";\nimport dagre from \"dagre\";\nimport { ResourceFlow } from \"../../domain/Recipe\";\nimport invert from \"invert-color\";\nimport { Building } from \"../../domain/Building\";\n\nexport type FlowDirection = \"input\" | \"output\";\n\nexport class Graph {\n  constructor(readonly nodes: Node[], readonly edges: Edge[]) {}\n\n  getElements() {\n    return [...this.nodes, ...this.edges];\n  }\n\n  getLayoutedElements(direction: \"TB\" | \"LR\" = \"LR\") {\n    const elements = this.getElements();\n    const dagreGraph = new dagre.graphlib.Graph({ directed: true });\n    dagreGraph.setDefaultEdgeLabel(() => ({}));\n    const isHorizontal = direction === \"LR\";\n    dagreGraph.setGraph({ rankdir: direction });\n    elements.forEach((el) => {\n      if (isNode(el)) {\n        dagreGraph.setNode(el.id, { width: 150, height: 50 });\n      } else {\n        dagreGraph.setEdge(el.source, el.target, {\n          width: el.label ? el.label.length * 5 + 20 : 50,\n          height: 50,\n        });\n      }\n    });\n    dagre.layout(dagreGraph);\n    return elements.map((el) => {\n      if (isNode(el)) {\n        const nodeWithPosition = dagreGraph.node(el.id);\n        el.targetPosition = isHorizontal ? Position.Left : Position.Top;\n        el.sourcePosition = isHorizontal ? Position.Right : Position.Bottom;\n        el.position = {\n          x: nodeWithPosition.x,\n          y: nodeWithPosition.y,\n        };\n      }\n      return el;\n    });\n  }\n}\n\nexport function flowNodeId(flowDirection: string, flow: ResourceFlow): string {\n  return `${flowDirection}_${flow.resource.id}`;\n}\n\nexport function buildingId(building: Building): string {\n  return `building_${building.id}`;\n}\n\nexport function flowEdgeId(\n  flowDirection: string,\n  flow: ResourceFlow,\n  building: Building\n): string {\n  return flowDirection === \"input\"\n    ? `${flow.resource.id}->${building.id}`\n    : `${building.id}->${flow.resource.id}`;\n}\n\nexport function flowToEdge(building: Building, flowDirection: FlowDirection) {\n  return (flow: ResourceFlow): Edge => ({\n    id: flowEdgeId(flowDirection, flow, building),\n    source:\n      flowDirection === \"input\"\n        ? flowNodeId(flowDirection, flow)\n        : buildingId(building),\n    target:\n      flowDirection === \"input\"\n        ? buildingId(building)\n        : flowNodeId(flowDirection, flow),\n    label: `${flow.flowRate}`,\n    animated: true,\n    type: \"smoothstep\",\n    arrowHeadType: ArrowHeadType.Arrow,\n  });\n}\n\nexport function flowToNode(flowDirection: FlowDirection) {\n  return (flow: ResourceFlow) => ({\n    id: flowNodeId(flowDirection, flow),\n    data: { label: flow.resource.name, flow: flow },\n    position: {\n      x: 0,\n      y: 0,\n    },\n    type: flowDirection,\n    style: {\n      backgroundColor: flow.resource.color,\n      borderColor: invert(flow.resource.color),\n      color: invert(flow.resource.color, true),\n    },\n  });\n}\n","import {\n  DataProvider,\n  Error as TSXError,\n  Loading,\n  useDataProvider,\n} from \"react-admin\";\nimport { useState, useEffect } from \"react\";\nimport { ReactFlowProvider } from \"react-flow-renderer\";\nimport { DryRecipe, hydrateRecipe } from \"../../persistence/DryRecipe\";\nimport { useLoadingStyles } from \"./loadingStyles\";\nimport { Diagram } from \"../graph/Diagram\";\nimport { buildingId, flowToEdge, flowToNode, Graph } from \"../graph/Graph\";\nimport { Recipe } from \"../../domain/Recipe\";\nimport { Node, Edge } from \"react-flow-renderer\";\n\nasync function buildGraph(dryRecipe: DryRecipe, dataProvider: DataProvider) {\n  const recipe = await hydrateRecipe(dryRecipe, dataProvider);\n  return recipeToGraph(recipe);\n}\n\nexport function recipeToGraph(recipe: Recipe) {\n  const buildingNode: Node = {\n    id: buildingId(recipe.building),\n    data: { label: recipe.building.name },\n    position: {\n      x: 0,\n      y: 0,\n    },\n  };\n\n  const inputNodes = recipe.inputs.map(flowToNode(\"input\"));\n  const outputNodes = recipe.outputs.map(flowToNode(\"output\"));\n  const inputEdges: Edge[] = recipe.inputs.map(\n    flowToEdge(recipe.building, \"input\")\n  );\n  const outputEdges: Edge[] = recipe.outputs.map(\n    flowToEdge(recipe.building, \"output\")\n  );\n  return new Graph(\n    [buildingNode, ...inputNodes, ...outputNodes],\n    [...inputEdges, ...outputEdges]\n  );\n}\n\nconst RecipeGraphInner: React.FC<{ dryRecipe?: DryRecipe }> = ({\n  dryRecipe,\n}) => {\n  const loadingClasses = useLoadingStyles();\n  const dataProvider = useDataProvider();\n  const [graph, setGraph] = useState<Graph>();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string>();\n  useEffect(() => {\n    if (dryRecipe) {\n      buildGraph(dryRecipe, dataProvider)\n        .then((newGraph) => {\n          setGraph(newGraph);\n          setLoading(false);\n        })\n        .catch((error) => {\n          setError(error);\n          setLoading(false);\n        });\n    }\n  }, [dataProvider, dryRecipe]);\n\n  if (loading) return <Loading classes={loadingClasses} />;\n  if (error) return <TSXError error={error} />;\n  if (!graph) return null;\n  return <Diagram graph={graph} />;\n};\n\nconst RecipeGraph: React.FC<{ dryRecipe?: DryRecipe }> = ({ dryRecipe }) => (\n  <ReactFlowProvider>\n    <RecipeGraphInner dryRecipe={dryRecipe} />\n  </ReactFlowProvider>\n);\n\nexport default RecipeGraph;\n","import { useFormState } from \"react-final-form\";\nimport {\n  List,\n  Datagrid,\n  TextField,\n  ListProps,\n  Create,\n  SimpleForm,\n  TextInput,\n  NumberInput,\n  ArrayInput,\n  SimpleFormIterator,\n  SelectInput,\n  required,\n  CreateProps,\n  ReferenceInput,\n  ArrayField,\n  Edit,\n  EditProps,\n  ReferenceField,\n  SingleFieldList,\n  EditButton,\n  ChipField,\n  FilterProps,\n  TabbedForm,\n  FormTab,\n  FieldProps,\n} from \"react-admin\";\nimport _ from \"lodash\";\nimport { DryRecipe } from \"./persistence/DryRecipe\";\nimport { useLocation } from \"react-router-dom\";\n\nimport { Filter, SearchInput } from \"react-admin\";\nimport RecipeGraph from \"./view/recipe/RecipeGraph\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Location } from \"history\";\n\nconst RecipeFilter: React.FC<Omit<FilterProps, \"children\">> = (props) => (\n  <Filter {...props}>\n    <SearchInput source=\"q\" alwaysOn />\n  </Filter>\n);\n\nexport const RecipeList: React.FC<ListProps> = (props) => (\n  <List {...props} filters={<RecipeFilter />}>\n    <Datagrid>\n      <TextField source=\"id\" />\n      <TextField source=\"name\" />\n      <ArrayField source=\"inputs\">\n        <SingleFieldList>\n          <ReferenceField label=\"Input\" source=\"resource\" reference=\"resources\">\n            <ChipField source=\"name\" />\n          </ReferenceField>\n        </SingleFieldList>\n      </ArrayField>\n      <ArrayField source=\"outputs\">\n        <SingleFieldList>\n          <ReferenceField\n            label=\"Output\"\n            source=\"resource\"\n            reference=\"resources\"\n          >\n            <ChipField source=\"name\" />\n          </ReferenceField>\n        </SingleFieldList>\n      </ArrayField>\n      <ReferenceField label=\"Building\" source=\"building\" reference=\"buildings\">\n        <TextField source=\"name\" />\n      </ReferenceField>\n      <EditButton />\n    </Datagrid>\n  </List>\n);\n\ninterface RecipeTitleProps {\n  record?: DryRecipe;\n}\n\nconst RecipeTitle: React.FC<RecipeTitleProps> = ({ record }) =>\n  record ? (\n    <span>\n      Recipe #{record.id} - {record.name}\n    </span>\n  ) : null;\n\nconst GraphField: React.FC<FieldProps> = () => {\n  const dryRecipe = useFormState().values as DryRecipe | undefined;\n  return <RecipeGraph dryRecipe={dryRecipe} />;\n};\n\nconst useStylesEdit = makeStyles(() => ({\n  root: {\n    display: \"contents\",\n  },\n  main: {\n    flexDirection: \"column\",\n    flex: 1,\n  },\n  card: {\n    flex: 1,\n    flexDirection: \"column\",\n    display: \"flex\",\n  },\n}));\n\nconst useStylesForm = makeStyles(() => ({\n  form: {\n    display: \"contents\",\n  },\n  content: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    flex: 1,\n  },\n}));\n\nconst useStyles = makeStyles(() => ({\n  formTabContainer: {\n    display: \"contents\",\n  },\n  graphField: {\n    display: \"contents\",\n  },\n  form: {\n    display: \"contents\",\n  },\n}));\n\nfunction parseActiveTab(location: Location) {\n  const parts = location.pathname.split(\"/\");\n  return parts[3];\n}\n\nexport const RecipeEdit: React.FC<EditProps> = (props) => {\n  const location = useLocation();\n  const customClasses = useStyles();\n  const editClasses = useStylesEdit();\n  const tabbedFormClasses = useStylesForm();\n  const activeTab = parseActiveTab(location);\n  return (\n    <Edit\n      classes={activeTab === \"design\" ? editClasses : null}\n      title={<RecipeTitle />}\n      {...props}\n      transform={(data) =>\n        data.id ? data : { ...data, id: _.camelCase(data.name) }\n      }\n    >\n      <TabbedForm\n        className={activeTab === \"design\" ? customClasses.form : undefined}\n        classes={activeTab === \"design\" ? tabbedFormClasses : null}\n      >\n        <FormTab label=\"Properties\">\n          <TextInput source=\"id\" />\n          <TextInput source=\"name\" validate={required()} />\n          <ArrayInput source=\"inputs\" defaultValue={[]}>\n            <SimpleFormIterator>\n              <ReferenceInput\n                label=\"resource\"\n                source=\"resource\"\n                reference=\"resources\"\n                validate={required()}\n              >\n                <SelectInput optionText=\"name\" />\n              </ReferenceInput>\n              <NumberInput source=\"flowRate\" validate={required()} />\n            </SimpleFormIterator>\n          </ArrayInput>\n          <ArrayInput source=\"outputs\" defaultValue={[]}>\n            <SimpleFormIterator>\n              <ReferenceInput\n                label=\"resource\"\n                source=\"resource\"\n                reference=\"resources\"\n                validate={required()}\n              >\n                <SelectInput optionText=\"name\" />\n              </ReferenceInput>\n              <NumberInput source=\"flowRate\" validate={required()} />\n            </SimpleFormIterator>\n          </ArrayInput>\n          <ReferenceInput\n            label=\"building\"\n            source=\"building\"\n            reference=\"buildings\"\n            validate={required()}\n          >\n            <SelectInput optionText=\"name\" />\n          </ReferenceInput>\n        </FormTab>\n        <FormTab\n          contentClassName={customClasses.formTabContainer}\n          label=\"Design\"\n          path=\"design\"\n        >\n          {activeTab === \"design\" ? (\n            <GraphField\n              formClassName={customClasses.graphField}\n              source=\"design\"\n            />\n          ) : undefined}\n        </FormTab>\n      </TabbedForm>\n    </Edit>\n  );\n};\n\nexport const RecipeCreate: React.FC<CreateProps> = (props) => (\n  <Create\n    title=\"Create a Recipe\"\n    {...props}\n    transform={(data) =>\n      data.id ? data : { ...data, id: _.camelCase(data.name) }\n    }\n  >\n    <SimpleForm>\n      <TextInput source=\"id\" />\n      <TextInput source=\"name\" validate={required()} />\n      <ArrayInput source=\"inputs\" defaultValue={[]}>\n        <SimpleFormIterator>\n          <ReferenceInput\n            label=\"resource\"\n            source=\"resource\"\n            reference=\"resources\"\n            validate={required()}\n          >\n            <SelectInput optionText=\"name\" />\n          </ReferenceInput>\n          <NumberInput source=\"flowRate\" validate={required()} />\n        </SimpleFormIterator>\n      </ArrayInput>\n      <ArrayInput source=\"outputs\" defaultValue={[]}>\n        <SimpleFormIterator>\n          <ReferenceInput\n            label=\"resource\"\n            source=\"resource\"\n            reference=\"resources\"\n            validate={required()}\n          >\n            <SelectInput optionText=\"name\" />\n          </ReferenceInput>\n          <NumberInput source=\"flowRate\" validate={required()} />\n        </SimpleFormIterator>\n      </ArrayInput>\n      <ReferenceInput\n        label=\"building\"\n        source=\"building\"\n        reference=\"buildings\"\n        validate={required()}\n      >\n        <SelectInput optionText=\"name\" />\n      </ReferenceInput>\n    </SimpleForm>\n  </Create>\n);\n","import {\n  Box,\n  Grid,\n  Card,\n  CardContent,\n  CardHeader,\n  Typography,\n  Button,\n} from \"@material-ui/core\";\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\nimport CloudDownloadIcon from \"@material-ui/icons/CloudDownload\";\nimport { ChangeEvent, MouseEvent } from \"react\";\nimport { useDataProvider, useNotify } from \"react-admin\";\n\nconst Dashboard = () => {\n  const dataProvider = useDataProvider();\n  const notify = useNotify();\n  const onUpload = (event: ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (readEvent) => {\n        const read = readEvent.target?.result;\n        if (read && typeof read === \"string\") {\n          const db = JSON.parse(read);\n          dataProvider.import(db).then(() => {\n            event.target.value = \"\";\n            notify(\"Import successful\");\n          });\n        } else {\n          console.error(\"Could not read file\");\n        }\n      };\n      reader.readAsText(file, \"utf-8\");\n    }\n  };\n  const onDownload = (event: MouseEvent) => {\n    dataProvider.export().then((response: any) => {\n      const { db, key } = response.data;\n      if (db) {\n        const blob = new Blob([JSON.stringify(db, null, 2)], {\n          type: \"application/json\",\n        });\n        const fakeLink = document.createElement(\"a\");\n        fakeLink.style.display = \"none\";\n        document.body.appendChild(fakeLink);\n        if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n          // Manage IE11+ & Edge\n          window.navigator.msSaveOrOpenBlob(blob, `${key}.json`);\n        } else {\n          fakeLink.setAttribute(\"href\", URL.createObjectURL(blob));\n          fakeLink.setAttribute(\"download\", `${key}.json`);\n          fakeLink.click();\n        }\n      } else {\n        notify(\"Empty database\");\n      }\n    });\n  };\n\n  return (\n    <Box mt={2}>\n      <Grid\n        container\n        direction=\"column\"\n        justify=\"flex-start\"\n        alignItems=\"stretch\"\n        spacing={3}\n      >\n        <Grid item>\n          <Typography variant=\"h3\" component=\"h1\">\n            Welcome to the generic building game plant designer\n          </Typography>\n        </Grid>\n        <Grid item>\n          <Card>\n            <CardHeader title=\"Import/Export DB\" />\n            <CardContent>\n              <Grid container spacing={1}>\n                <Grid item>\n                  <input\n                    accept=\"application/json\"\n                    id=\"contained-button-file\"\n                    style={{ display: \"none\" }}\n                    type=\"file\"\n                    onChange={onUpload}\n                  />\n                  <label htmlFor=\"contained-button-file\">\n                    <Button\n                      variant=\"contained\"\n                      startIcon={<CloudUploadIcon />}\n                      component=\"span\"\n                    >\n                      Import\n                    </Button>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    startIcon={<CloudDownloadIcon />}\n                    onClick={onDownload}\n                  >\n                    Export\n                  </Button>\n                </Grid>\n              </Grid>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default Dashboard;\n","import * as React from \"react\";\nimport {\n  List,\n  Datagrid,\n  TextField,\n  ListProps,\n  FilterProps,\n  Filter,\n  SearchInput,\n  ArrayField,\n  SingleFieldList,\n  ReferenceField,\n  ChipField,\n  ChipFieldProps,\n  FieldProps,\n  ReferenceArrayField,\n} from \"react-admin\";\nimport { DryResourceFlow } from \"./persistence/DryRecipe\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst PlantFilter: React.FC<Omit<FilterProps, \"children\">> = (props) => (\n  <Filter {...props}>\n    <SearchInput source=\"q\" alwaysOn />\n  </Filter>\n);\n\nconst CustomLabelChipField: React.FC<\n  ChipFieldProps & { renderLabel: (record: any) => string }\n> = ({ record, renderLabel, ...rest }) => (\n  <ChipField {...rest} record={{ id: renderLabel(record) }} source=\"id\" />\n);\n\nconst ResourceFlowField: React.FC<\n  FieldProps<DryResourceFlow & { id: string }>\n> = ({ record, ...rest }) => (\n  <ReferenceField\n    record={record}\n    {...rest}\n    source=\"resource\"\n    reference=\"resources\"\n    label=\"Input\"\n  >\n    <CustomLabelChipField\n      renderLabel={(innerRecord) => `${innerRecord.name} (${record?.flowRate})`}\n    />\n  </ReferenceField>\n);\n\nconst useStyles = makeStyles(\n  (theme) => ({\n    link: {\n      color: theme.palette.primary.main,\n    },\n  }),\n  { name: \"RaReferenceField\" }\n);\n\nexport const PlantList: React.FC<ListProps> = (props) => {\n  const classes = useStyles();\n  return (\n    <List {...props} filters={<PlantFilter />}>\n      <Datagrid>\n        <TextField source=\"id\" />\n        <TextField source=\"name\" />\n        <ArrayField source=\"targetResources\">\n          <SingleFieldList>\n            <ResourceFlowField />\n          </SingleFieldList>\n        </ArrayField>\n        <ReferenceArrayField\n          label=\"Recipes\"\n          reference=\"recipes\"\n          source=\"recipes\"\n        >\n          <SingleFieldList>\n            <ChipField className={classes.link} source=\"name\" />\n          </SingleFieldList>\n        </ReferenceArrayField>\n      </Datagrid>\n    </List>\n  );\n};\n","import * as React from \"react\";\nimport { Admin, Resource } from \"react-admin\";\nimport localStorageDataProviderExtended from \"./app/localStorageDataProviderExtended\";\nimport { ResourceList, ResourceCreate, ResourceEdit } from \"./app/resources\";\nimport { BuildingList, BuildingCreate, BuildingEdit } from \"./app/buildings\";\nimport { RecipeCreate, RecipeEdit, RecipeList } from \"./app/recipes\";\nimport Dashboard from \"./app/Dashboard\";\nimport { PlantList } from \"./app/plants\";\n\nconst dataProvider = localStorageDataProviderExtended({\n  defaultData: {},\n  localStorageKey: \"plantDesigner\",\n  localStorageUpdateDelay: 0,\n  loggingEnabled: true,\n});\n\nconst App = () => (\n  <Admin dataProvider={dataProvider} dashboard={Dashboard}>\n    <Resource\n      name=\"resources\"\n      list={ResourceList}\n      create={ResourceCreate}\n      edit={ResourceEdit}\n    />\n    <Resource\n      name=\"buildings\"\n      list={BuildingList}\n      create={BuildingCreate}\n      edit={BuildingEdit}\n    />\n    <Resource\n      name=\"recipes\"\n      list={RecipeList}\n      create={RecipeCreate}\n      edit={RecipeEdit}\n    />\n    <Resource name=\"plants\" list={PlantList} />\n  </Admin>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}